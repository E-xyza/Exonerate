<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" class="marks" width="928" height="718" viewBox="0 0 928 718"><rect width="928" height="718" fill="#fff"/><g fill="none" stroke-miterlimit="10" transform="translate(62,34)"><g class="mark-group role-frame root" role="graphics-object" aria-roledescription="group mark container"><g transform="translate(0,0)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z"/><g><g class="mark-group role-scope concat_0_group" role="graphics-object" aria-roledescription="group mark container"><g transform="translate(0,0)"><path class="background" aria-hidden="true" d="M0.5,0.5h860v200h-860Z" stroke="#ddd"/><g><g class="mark-group role-axis" aria-hidden="true"><g transform="translate(0.5,0.5)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" pointer-events="none"/><g><g class="mark-rule role-axis-grid" pointer-events="none"><line transform="translate(0,200)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/><line transform="translate(0,160)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/><line transform="translate(0,120)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/><line transform="translate(0,80)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/><line transform="translate(0,40)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/><line transform="translate(0,0)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/></g></g><path class="foreground" aria-hidden="true" d="" pointer-events="none" display="none"/></g></g><g class="mark-group role-axis" role="graphics-symbol" aria-roledescription="axis" aria-label="X-axis for a discrete scale with 43 values: additionalProperties, allOf, anyOf, boolean_schema, const, ending with uniqueItems"><g transform="translate(0.5,200.5)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" pointer-events="none"/><g><g class="mark-rule role-axis-tick" pointer-events="none"><line transform="translate(10,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(30,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(50,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(70,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(90,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(110,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(130,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(150,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(170,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(190,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(210,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(230,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(250,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(270,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(290,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(310,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(330,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(350,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(370,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(390,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(410,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(430,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(450,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(470,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(490,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(510,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(530,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(550,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(570,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(590,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(610,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(630,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(650,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(670,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(690,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(710,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(730,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(750,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(770,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(790,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(810,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(830,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(850,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/></g><g class="mark-text role-axis-label" pointer-events="none"><text text-anchor="end" transform="translate(10,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">additionalProperties</text><text text-anchor="end" transform="translate(30,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">allOf</text><text text-anchor="end" transform="translate(50,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">anyOf</text><text text-anchor="end" transform="translate(70,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">boolean_schema</text><text text-anchor="end" transform="translate(90,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">const</text><text text-anchor="end" transform="translate(110,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">contains</text><text text-anchor="end" transform="translate(130,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">content</text><text text-anchor="end" transform="translate(150,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">default</text><text text-anchor="end" transform="translate(170,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">defs</text><text text-anchor="end" transform="translate(190,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">dependentRequired</text><text text-anchor="end" transform="translate(210,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">dependentSchemas</text><text text-anchor="end" transform="translate(230,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">enum</text><text text-anchor="end" transform="translate(250,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">exclusiveMaximum</text><text text-anchor="end" transform="translate(270,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">exclusiveMinimum</text><text text-anchor="end" transform="translate(290,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">format</text><text text-anchor="end" transform="translate(310,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">id</text><text text-anchor="end" transform="translate(330,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">if-then-else</text><text text-anchor="end" transform="translate(350,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">infinite-loop-detection</text><text text-anchor="end" transform="translate(370,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">items</text><text text-anchor="end" transform="translate(390,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">maxContains</text><text text-anchor="end" transform="translate(410,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">maxItems</text><text text-anchor="end" transform="translate(430,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">maxLength</text><text text-anchor="end" transform="translate(450,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">maxProperties</text><text text-anchor="end" transform="translate(470,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">maximum</text><text text-anchor="end" transform="translate(490,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">minContains</text><text text-anchor="end" transform="translate(510,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">minItems</text><text text-anchor="end" transform="translate(530,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">minLength</text><text text-anchor="end" transform="translate(550,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">minProperties</text><text text-anchor="end" transform="translate(570,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">minimum</text><text text-anchor="end" transform="translate(590,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">multipleOf</text><text text-anchor="end" transform="translate(610,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">not</text><text text-anchor="end" transform="translate(630,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">oneOf</text><text text-anchor="end" transform="translate(650,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">pattern</text><text text-anchor="end" transform="translate(670,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">patternProperties</text><text text-anchor="end" transform="translate(690,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">prefixItems</text><text text-anchor="end" transform="translate(710,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">properties</text><text text-anchor="end" transform="translate(730,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">propertyNames</text><text text-anchor="end" transform="translate(750,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">ref</text><text text-anchor="end" transform="translate(770,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">required</text><text text-anchor="end" transform="translate(790,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">type</text><text text-anchor="end" transform="translate(810,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">unevaluatedItems</text><text text-anchor="end" transform="translate(830,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">unevaluatedProperties</text><text text-anchor="end" transform="translate(850,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">uniqueItems</text></g><g class="mark-rule role-axis-domain" pointer-events="none"><line transform="translate(0,0)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/></g></g><path class="foreground" aria-hidden="true" d="" pointer-events="none" display="none"/></g></g><g class="mark-group role-axis" role="graphics-symbol" aria-roledescription="axis" aria-label="Y-axis titled 'percent correct' for a linear scale with values from 0 to 100"><g transform="translate(0.5,0.5)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" pointer-events="none"/><g><g class="mark-rule role-axis-tick" pointer-events="none"><line transform="translate(0,200)" x2="-5" y2="0" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(0,160)" x2="-5" y2="0" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(0,120)" x2="-5" y2="0" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(0,80)" x2="-5" y2="0" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(0,40)" x2="-5" y2="0" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(0,0)" x2="-5" y2="0" stroke="#888" stroke-width="1" opacity="1"/></g><g class="mark-text role-axis-label" pointer-events="none"><text text-anchor="end" transform="translate(-13,204)" font-family="sans-serif" font-size="12px" fill="#000" opacity="1">0</text><text text-anchor="end" transform="translate(-13,164)" font-family="sans-serif" font-size="12px" fill="#000" opacity="1">20</text><text text-anchor="end" transform="translate(-13,124)" font-family="sans-serif" font-size="12px" fill="#000" opacity="1">40</text><text text-anchor="end" transform="translate(-13,84)" font-family="sans-serif" font-size="12px" fill="#000" opacity="1">60</text><text text-anchor="end" transform="translate(-13,43.99999999999999)" font-family="sans-serif" font-size="12px" fill="#000" opacity="1">80</text><text text-anchor="end" transform="translate(-13,4)" font-family="sans-serif" font-size="12px" fill="#000" opacity="1">100</text></g><g class="mark-rule role-axis-domain" pointer-events="none"><line transform="translate(0,200)" x2="0" y2="-200" stroke="#888" stroke-width="1" opacity="1"/></g><g class="mark-text role-axis-title" pointer-events="none"><text text-anchor="middle" transform="translate(-43,100) rotate(-90) translate(0,-3)" font-family="sans-serif" font-size="12px" font-weight="400" fill="#1c2a3a" opacity="1">percent correct</text></g></g><path class="foreground" aria-hidden="true" d="" pointer-events="none" display="none"/></g></g><g class="mark-symbol role-mark concat_0_marks" role="graphics-object" aria-roledescription="symbol mark container"><path aria-label="group: additionalProperties; percent correct: 0; color: orange; test: additionalProperties being false does not allow other properties; schema: {&quot;additionalProperties&quot;:false,&quot;patternProperties&quot;:{&quot;^v&quot;:{}},&quot;properties&quot;:{&quot;bar&quot;:{},&quot;foo&quot;:{}}}; pass: ; fail: ❌ patternProperties are not additional properties&#xA;❌ ignores other non-objects&#xA;❌ ignores strings&#xA;❌ ignores arrays&#xA;❌ an additional property is invalid&#xA;❌ no additional properties is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(10,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: additionalProperties; percent correct: 2; color: red; test: non-ASCII pattern with additionalProperties; schema: {&quot;additionalProperties&quot;:false,&quot;patternProperties&quot;:{&quot;^á&quot;:{}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(10,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: additionalProperties; percent correct: 4; color: orange; test: additionalProperties are allowed by default; schema: {&quot;properties&quot;:{&quot;bar&quot;:{},&quot;foo&quot;:{}}}; pass: ; fail: ❌ additional properties are allowed" role="graphics-symbol" aria-roledescription="circle" transform="translate(10,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: additionalProperties; percent correct: 6; color: red; test: additionalProperties should not look in applicators; schema: {&quot;additionalProperties&quot;:{&quot;type&quot;:&quot;boolean&quot;},&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:{}}}]}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(10,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: additionalProperties; percent correct: 34; color: yellow; test: additionalProperties allows a schema which should validate; schema: {&quot;additionalProperties&quot;:{&quot;type&quot;:&quot;boolean&quot;},&quot;properties&quot;:{&quot;bar&quot;:{},&quot;foo&quot;:{}}}; pass: ✅ an additional invalid property is invalid; fail: ❌ an additional valid property is valid&#xA;❌ no additional properties is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(10,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: additionalProperties; percent correct: 50; color: yellow; test: additionalProperties can exist by itself; schema: {&quot;additionalProperties&quot;:{&quot;type&quot;:&quot;boolean&quot;}}; pass: ✅ an additional invalid property is invalid; fail: ❌ an additional valid property is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(10,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 0; color: orange; test: allOf with boolean schemas, all true; schema: {&quot;allOf&quot;:[true,true]}; pass: ; fail: ❌ any value is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(30,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 2; color: orange; test: allOf with one empty schema; schema: {&quot;allOf&quot;:[{}]}; pass: ; fail: ❌ any data is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(30,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 4; color: orange; test: allOf with two empty schemas; schema: {&quot;allOf&quot;:[{},{}]}; pass: ; fail: ❌ any data is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(30,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 26; color: yellow; test: allOf combined with anyOf, oneOf; schema: {&quot;allOf&quot;:[{&quot;multipleOf&quot;:2}],&quot;anyOf&quot;:[{&quot;multipleOf&quot;:3}],&quot;oneOf&quot;:[{&quot;multipleOf&quot;:5}]}; pass: ✅ allOf: true, anyOf: true, oneOf: true&#xA;✅ allOf: false, anyOf: false, oneOf: false; fail: ❌ allOf: true, anyOf: true, oneOf: false&#xA;❌ allOf: true, anyOf: false, oneOf: true&#xA;❌ allOf: true, anyOf: false, oneOf: false&#xA;❌ allOf: false, anyOf: true, oneOf: true&#xA;❌ allOf: false, anyOf: true, oneOf: false&#xA;❌ allOf: false, anyOf: false, oneOf: true" role="graphics-symbol" aria-roledescription="circle" transform="translate(30,148)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 50; color: yellow; test: allOf simple types; schema: {&quot;allOf&quot;:[{&quot;maximum&quot;:30},{&quot;minimum&quot;:20}]}; pass: ✅ mismatch one; fail: ❌ valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(30,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 52; color: yellow; test: allOf with the first empty schema; schema: {&quot;allOf&quot;:[{},{&quot;type&quot;:&quot;number&quot;}]}; pass: ✅ string is invalid; fail: ❌ number is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(30,96)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 76; color: yellow; test: allOf; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;integer&quot;}},&quot;required&quot;:[&quot;bar&quot;]},{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;foo&quot;]}]}; pass: ✅ wrong type&#xA;✅ mismatch first&#xA;✅ mismatch second; fail: ❌ allOf" role="graphics-symbol" aria-roledescription="circle" transform="translate(30,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 100; color: green; test: allOf with base schema; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;foo&quot;]},{&quot;properties&quot;:{&quot;baz&quot;:{&quot;type&quot;:&quot;null&quot;}},&quot;required&quot;:[&quot;baz&quot;]}],&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;integer&quot;}},&quot;required&quot;:[&quot;bar&quot;]}; pass: ✅ mismatch both&#xA;✅ mismatch second allOf&#xA;✅ mismatch first allOf&#xA;✅ mismatch base schema&#xA;✅ valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 98; color: green; test: allOf with boolean schemas, some false; schema: {&quot;allOf&quot;:[true,false]}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 96; color: green; test: allOf with boolean schemas, all false; schema: {&quot;allOf&quot;:[false,false]}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 94; color: green; test: allOf with the last empty schema; schema: {&quot;allOf&quot;:[{&quot;type&quot;:&quot;number&quot;},{}]}; pass: ✅ string is invalid&#xA;✅ number is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 92; color: green; test: nested allOf, to check validation semantics; schema: {&quot;allOf&quot;:[{&quot;allOf&quot;:[{&quot;type&quot;:&quot;null&quot;}]}]}; pass: ✅ anything non-null is invalid&#xA;✅ null is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 0; color: orange; test: anyOf with boolean schemas, all true; schema: {&quot;anyOf&quot;:[true,true]}; pass: ; fail: ❌ any value is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(50,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 2; color: orange; test: anyOf with boolean schemas, some true; schema: {&quot;anyOf&quot;:[true,false]}; pass: ; fail: ❌ any value is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(50,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 50; color: yellow; test: anyOf with one empty schema; schema: {&quot;anyOf&quot;:[{&quot;type&quot;:&quot;number&quot;},{}]}; pass: ✅ number is valid; fail: ❌ string is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(50,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 52; color: yellow; test: nested anyOf, to check validation semantics; schema: {&quot;anyOf&quot;:[{&quot;anyOf&quot;:[{&quot;type&quot;:&quot;null&quot;}]}]}; pass: ✅ null is valid; fail: ❌ anything non-null is invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(50,96)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 76; color: yellow; test: anyOf; schema: {&quot;anyOf&quot;:[{&quot;type&quot;:&quot;integer&quot;},{&quot;minimum&quot;:2}]}; pass: ✅ neither anyOf valid&#xA;✅ both anyOf valid&#xA;✅ first anyOf valid; fail: ❌ second anyOf valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(50,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 100; color: green; test: anyOf with base schema; schema: {&quot;anyOf&quot;:[{&quot;maxLength&quot;:2},{&quot;minLength&quot;:4}],&quot;type&quot;:&quot;string&quot;}; pass: ✅ both anyOf invalid&#xA;✅ one anyOf valid&#xA;✅ mismatch base schema; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(50,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 98; color: green; test: anyOf with boolean schemas, all false; schema: {&quot;anyOf&quot;:[false,false]}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(50,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 96; color: green; test: anyOf complex types; schema: {&quot;anyOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;integer&quot;}},&quot;required&quot;:[&quot;bar&quot;]},{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;foo&quot;]}]}; pass: ✅ neither anyOf valid (complex)&#xA;✅ both anyOf valid (complex)&#xA;✅ second anyOf valid (complex)&#xA;✅ first anyOf valid (complex); fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(50,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: boolean_schema; percent correct: 12; color: yellow; test: boolean schema 'true'; schema: true; pass: ✅ boolean true is valid; fail: ❌ empty array is valid&#xA;❌ array is valid&#xA;❌ empty object is valid&#xA;❌ object is valid&#xA;❌ null is valid&#xA;❌ boolean false is valid&#xA;❌ string is valid&#xA;❌ number is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(70,176)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: boolean_schema; percent correct: 100; color: green; test: boolean schema 'false'; schema: false; pass: ✅ empty array is invalid&#xA;✅ array is invalid&#xA;✅ empty object is invalid&#xA;✅ object is invalid&#xA;✅ null is invalid&#xA;✅ boolean false is invalid&#xA;✅ boolean true is invalid&#xA;✅ string is invalid&#xA;✅ number is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(70,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 0; color: orange; test: const with false does not match 0; schema: {&quot;const&quot;:false}; pass: ; fail: ❌ float zero is invalid&#xA;❌ integer zero is invalid&#xA;❌ false is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(90,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 2; color: orange; test: nul characters in strings; schema: {&quot;const&quot;:&quot;hello\u0000there&quot;}; pass: ; fail: ❌ do not match string lacking nul&#xA;❌ match string with nul" role="graphics-symbol" aria-roledescription="circle" transform="translate(90,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 50; color: yellow; test: float and integers are equal up to 64-bit representation limits; schema: {&quot;const&quot;:9007199254740992}; pass: ✅ float minus one is invalid&#xA;✅ integer minus one is invalid; fail: ❌ float is valid&#xA;❌ integer is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(90,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 66; color: yellow; test: const with array; schema: {&quot;const&quot;:[{&quot;foo&quot;:&quot;bar&quot;}]}; pass: ✅ array with additional items is invalid&#xA;✅ another array item is invalid; fail: ❌ same array is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(90,68)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 68; color: yellow; test: const with [false] does not match [0]; schema: {&quot;const&quot;:[false]}; pass: ✅ [0.0] is invalid&#xA;✅ [0] is invalid; fail: ❌ [false] is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(90,63.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 70; color: yellow; test: const with [true] does not match [1]; schema: {&quot;const&quot;:[true]}; pass: ✅ [1.0] is invalid&#xA;✅ [1] is invalid; fail: ❌ [true] is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(90,60.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 72; color: yellow; test: const with 0 does not match other zero-like types; schema: {&quot;const&quot;:0}; pass: ✅ empty string is invalid&#xA;✅ empty array is invalid&#xA;✅ empty object is invalid&#xA;✅ false is invalid; fail: ❌ float zero is valid&#xA;❌ integer zero is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(90,56.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 100; color: green; test: const validation; schema: {&quot;const&quot;:2}; pass: ✅ another type is invalid&#xA;✅ another value is invalid&#xA;✅ same value is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 98; color: green; test: const with object; schema: {&quot;const&quot;:{&quot;baz&quot;:&quot;bax&quot;,&quot;foo&quot;:&quot;bar&quot;}}; pass: ✅ another type is invalid&#xA;✅ another object is invalid&#xA;✅ same object with different property order is valid&#xA;✅ same object is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 96; color: green; test: const with null; schema: {&quot;const&quot;:null}; pass: ✅ not null is invalid&#xA;✅ null is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 94; color: green; test: const with true does not match 1; schema: {&quot;const&quot;:true}; pass: ✅ float one is invalid&#xA;✅ integer one is invalid&#xA;✅ true is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 92; color: green; test: const with {&quot;a&quot;: false} does not match {&quot;a&quot;: 0}; schema: {&quot;const&quot;:{&quot;a&quot;:false}}; pass: ✅ {&quot;a&quot;: 0.0} is invalid&#xA;✅ {&quot;a&quot;: 0} is invalid&#xA;✅ {&quot;a&quot;: false} is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 90; color: green; test: const with {&quot;a&quot;: true} does not match {&quot;a&quot;: 1}; schema: {&quot;const&quot;:{&quot;a&quot;:true}}; pass: ✅ {&quot;a&quot;: 1.0} is invalid&#xA;✅ {&quot;a&quot;: 1} is invalid&#xA;✅ {&quot;a&quot;: true} is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,19.999999999999996)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 88; color: green; test: const with 1 does not match true; schema: {&quot;const&quot;:1}; pass: ✅ float one is valid&#xA;✅ integer one is valid&#xA;✅ true is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,24)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 86; color: green; test: const with -2.0 matches integer and float types; schema: {&quot;const&quot;:-2.0}; pass: ✅ float -2.00001 is invalid&#xA;✅ float 2.0 is invalid&#xA;✅ float -2.0 is valid&#xA;✅ integer 2 is invalid&#xA;✅ integer -2 is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,28.000000000000004)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: contains; percent correct: 0; color: red; test: items + contains; schema: {&quot;contains&quot;:{&quot;multipleOf&quot;:3},&quot;items&quot;:{&quot;multipleOf&quot;:2}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(110,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: contains; percent correct: 34; color: yellow; test: contains keyword validation; schema: {&quot;contains&quot;:{&quot;minimum&quot;:5}}; pass: ✅ empty array is invalid&#xA;✅ array without items matching schema is invalid; fail: ❌ not array is valid&#xA;❌ array with two items matching schema (5, 6) is valid&#xA;❌ array with item matching schema (6) is valid&#xA;❌ array with item matching schema (5) is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(110,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: contains; percent correct: 36; color: yellow; test: contains keyword with const keyword; schema: {&quot;contains&quot;:{&quot;const&quot;:5}}; pass: ✅ array without item 5 is invalid; fail: ❌ array with two items 5 is valid&#xA;❌ array with item 5 is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(110,128)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: contains; percent correct: 50; color: yellow; test: contains keyword with boolean schema true; schema: {&quot;contains&quot;:true}; pass: ✅ empty array is invalid; fail: ❌ any non-empty array is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(110,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: contains; percent correct: 66; color: yellow; test: contains keyword with boolean schema false; schema: {&quot;contains&quot;:false}; pass: ✅ empty array is invalid&#xA;✅ any non-empty array is invalid; fail: ❌ non-arrays are valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(110,68)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: content; percent correct: 0; color: orange; test: validation of string-encoded content based on media type; schema: {&quot;contentMediaType&quot;:&quot;application/json&quot;}; pass: ; fail: ❌ ignores non-strings&#xA;❌ an invalid JSON document; validates true&#xA;❌ a valid JSON document" role="graphics-symbol" aria-roledescription="circle" transform="translate(130,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: content; percent correct: 2; color: orange; test: validation of binary string-encoding; schema: {&quot;contentEncoding&quot;:&quot;base64&quot;}; pass: ; fail: ❌ ignores non-strings&#xA;❌ an invalid base64 string (% is not a valid character); validates true&#xA;❌ a valid base64 string" role="graphics-symbol" aria-roledescription="circle" transform="translate(130,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: content; percent correct: 4; color: orange; test: validation of binary-encoded media type documents; schema: {&quot;contentEncoding&quot;:&quot;base64&quot;,&quot;contentMediaType&quot;:&quot;application/json&quot;}; pass: ; fail: ❌ ignores non-strings&#xA;❌ an invalid base64 string that is valid JSON; validates true&#xA;❌ a validly-encoded invalid JSON document; validates true&#xA;❌ a valid base64-encoded JSON document" role="graphics-symbol" aria-roledescription="circle" transform="translate(130,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: content; percent correct: 6; color: orange; test: validation of binary-encoded media type documents with schema; schema: {&quot;contentEncoding&quot;:&quot;base64&quot;,&quot;contentMediaType&quot;:&quot;application/json&quot;,&quot;contentSchema&quot;:{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;foo&quot;]}}; pass: ; fail: ❌ ignores non-strings&#xA;❌ an invalid base64 string that is valid JSON; validates true&#xA;❌ a validly-encoded invalid JSON document; validates true&#xA;❌ an empty array as a base64-encoded JSON document&#xA;❌ an empty object as a base64-encoded JSON document; validates true&#xA;❌ an invalid base64-encoded JSON document; validates true&#xA;❌ another valid base64-encoded JSON document&#xA;❌ a valid base64-encoded JSON document" role="graphics-symbol" aria-roledescription="circle" transform="translate(130,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: default; percent correct: 0; color: red; test: invalid type for default; schema: {&quot;properties&quot;:{&quot;foo&quot;:{&quot;default&quot;:[],&quot;type&quot;:&quot;integer&quot;}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(150,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: default; percent correct: 2; color: orange; test: invalid string value for default; schema: {&quot;properties&quot;:{&quot;bar&quot;:{&quot;default&quot;:&quot;bad&quot;,&quot;minLength&quot;:4,&quot;type&quot;:&quot;string&quot;}}}; pass: ; fail: ❌ still valid when the invalid default is used&#xA;❌ valid when property is specified" role="graphics-symbol" aria-roledescription="circle" transform="translate(150,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: defs; percent correct: 0; color: red; test: validate definition against metaschema; schema: {&quot;$ref&quot;:&quot;https://json-schema.org/draft/2020-12/schema&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(170,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentRequired; percent correct: 0; color: red; test: single dependency; schema: {&quot;dependentRequired&quot;:{&quot;bar&quot;:[&quot;foo&quot;]}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(190,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentRequired; percent correct: 2; color: orange; test: empty dependents; schema: {&quot;dependentRequired&quot;:{&quot;bar&quot;:[]}}; pass: ; fail: ❌ non-object is valid&#xA;❌ object with one property&#xA;❌ empty object" role="graphics-symbol" aria-roledescription="circle" transform="translate(190,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentRequired; percent correct: 4; color: orange; test: multiple dependents required; schema: {&quot;dependentRequired&quot;:{&quot;quux&quot;:[&quot;foo&quot;,&quot;bar&quot;]}}; pass: ; fail: ❌ missing both dependencies&#xA;❌ missing other dependency&#xA;❌ missing dependency&#xA;❌ with dependencies&#xA;❌ nondependants&#xA;❌ neither" role="graphics-symbol" aria-roledescription="circle" transform="translate(190,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentRequired; percent correct: 100; color: green; test: dependencies with escaped characters; schema: {&quot;dependentRequired&quot;:{&quot;foo\nbar&quot;:[&quot;foo\rbar&quot;],&quot;foo\&quot;bar&quot;:[&quot;foo'bar&quot;]}}; pass: ✅ quoted quotes missing dependent&#xA;✅ CRLF missing dependent&#xA;✅ quoted quotes&#xA;✅ CRLF; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(190,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentSchemas; percent correct: 0; color: red; test: boolean subschemas; schema: {&quot;dependentSchemas&quot;:{&quot;bar&quot;:false,&quot;foo&quot;:true}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(210,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentSchemas; percent correct: 2; color: red; test: dependencies with escaped characters; schema: {&quot;dependentSchemas&quot;:{&quot;foo\tbar&quot;:{&quot;minProperties&quot;:4},&quot;foo'bar&quot;:{&quot;required&quot;:[&quot;foo\&quot;bar&quot;]}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(210,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentSchemas; percent correct: 60; color: yellow; test: single dependency; schema: {&quot;dependentSchemas&quot;:{&quot;bar&quot;:{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;integer&quot;},&quot;foo&quot;:{&quot;type&quot;:&quot;integer&quot;}}}}}; pass: ✅ wrong type both&#xA;✅ wrong type other&#xA;✅ wrong type; fail: ❌ no dependency&#xA;❌ valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(210,80)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 0; color: red; test: heterogeneous enum-with-null validation; schema: {&quot;enum&quot;:[6,null]}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 2; color: red; test: enum with 1 does not match true; schema: {&quot;enum&quot;:[1]}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 34; color: yellow; test: enum with 0 does not match false; schema: {&quot;enum&quot;:[0]}; pass: ✅ false is invalid; fail: ❌ float zero is valid&#xA;❌ integer zero is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(230,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 66; color: yellow; test: enums in properties; schema: {&quot;properties&quot;:{&quot;bar&quot;:{&quot;enum&quot;:[&quot;bar&quot;]},&quot;foo&quot;:{&quot;enum&quot;:[&quot;foo&quot;]}},&quot;required&quot;:[&quot;bar&quot;],&quot;type&quot;:&quot;object&quot;}; pass: ✅ missing all properties is invalid&#xA;✅ missing required property is invalid&#xA;✅ wrong bar value&#xA;✅ wrong foo value; fail: ❌ missing optional property is valid&#xA;❌ both properties are valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(230,68)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 68; color: yellow; test: enum with false does not match 0; schema: {&quot;enum&quot;:[false]}; pass: ✅ float zero is invalid&#xA;✅ integer zero is invalid; fail: ❌ false is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(230,63.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 70; color: yellow; test: enum with true does not match 1; schema: {&quot;enum&quot;:[true]}; pass: ✅ float one is invalid&#xA;✅ integer one is invalid; fail: ❌ true is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(230,60.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 100; color: green; test: simple enum validation; schema: {&quot;enum&quot;:[1,2,3]}; pass: ✅ something else is invalid&#xA;✅ one of the enum is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 98; color: green; test: heterogeneous enum validation; schema: {&quot;enum&quot;:[6,&quot;foo&quot;,[],true,{&quot;foo&quot;:12}]}; pass: ✅ extra properties in object is invalid&#xA;✅ valid object matches&#xA;✅ objects are deep compared&#xA;✅ something else is invalid&#xA;✅ one of the enum is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 96; color: green; test: enum with escaped characters; schema: {&quot;enum&quot;:[&quot;foo\nbar&quot;,&quot;foo\rbar&quot;]}; pass: ✅ another string is invalid&#xA;✅ member 2 is valid&#xA;✅ member 1 is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 94; color: green; test: nul characters in strings; schema: {&quot;enum&quot;:[&quot;hello\u0000there&quot;]}; pass: ✅ do not match string lacking nul&#xA;✅ match string with nul; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: exclusiveMaximum; percent correct: 0; color: orange; test: exclusiveMaximum validation; schema: {&quot;exclusiveMaximum&quot;:3.0}; pass: ; fail: ❌ ignores non-numbers&#xA;❌ above the exclusiveMaximum is invalid&#xA;❌ boundary point is invalid&#xA;❌ below the exclusiveMaximum is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(250,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: exclusiveMinimum; percent correct: 76; color: yellow; test: exclusiveMinimum validation; schema: {&quot;exclusiveMinimum&quot;:1.1}; pass: ✅ below the exclusiveMinimum is invalid&#xA;✅ boundary point is invalid&#xA;✅ above the exclusiveMinimum is valid; fail: ❌ ignores non-numbers" role="graphics-symbol" aria-roledescription="circle" transform="translate(270,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 0; color: red; test: validation of e-mail addresses; schema: {&quot;format&quot;:&quot;email&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 2; color: orange; test: validation of IDN e-mail addresses; schema: {&quot;format&quot;:&quot;idn-email&quot;}; pass: ; fail: ❌ invalid idn-email string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 4; color: red; test: validation of regexes; schema: {&quot;format&quot;:&quot;regex&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 6; color: orange; test: validation of IP addresses; schema: {&quot;format&quot;:&quot;ipv4&quot;}; pass: ; fail: ❌ invalid ipv4 string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 8; color: red; test: validation of IPv6 addresses; schema: {&quot;format&quot;:&quot;ipv6&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,184)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 10; color: red; test: validation of IDN hostnames; schema: {&quot;format&quot;:&quot;idn-hostname&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,180)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 12; color: red; test: validation of hostnames; schema: {&quot;format&quot;:&quot;hostname&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,176)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 14; color: orange; test: validation of date strings; schema: {&quot;format&quot;:&quot;date&quot;}; pass: ; fail: ❌ invalid date string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,172)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 16; color: red; test: validation of date-time strings; schema: {&quot;format&quot;:&quot;date-time&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,168)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 18; color: red; test: validation of time strings; schema: {&quot;format&quot;:&quot;time&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,164)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 20; color: orange; test: validation of JSON pointers; schema: {&quot;format&quot;:&quot;json-pointer&quot;}; pass: ; fail: ❌ invalid json-pointer string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,160)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 22; color: red; test: validation of relative JSON pointers; schema: {&quot;format&quot;:&quot;relative-json-pointer&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,156)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 24; color: red; test: validation of IRIs; schema: {&quot;format&quot;:&quot;iri&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,152)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 26; color: orange; test: validation of IRI references; schema: {&quot;format&quot;:&quot;iri-reference&quot;}; pass: ; fail: ❌ invalid iri-reference string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,148)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 28; color: red; test: validation of URIs; schema: {&quot;format&quot;:&quot;uri&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,144)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 30; color: red; test: validation of URI references; schema: {&quot;format&quot;:&quot;uri-reference&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,140)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 32; color: red; test: validation of URI templates; schema: {&quot;format&quot;:&quot;uri-template&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,136)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 34; color: red; test: validation of UUIDs; schema: {&quot;format&quot;:&quot;uuid&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 36; color: orange; test: validation of durations; schema: {&quot;format&quot;:&quot;duration&quot;}; pass: ; fail: ❌ invalid duration string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,128)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: id; percent correct: 0; color: red; test: Invalid use of fragments in location-independent $id; schema: {&quot;$ref&quot;:&quot;https://json-schema.org/draft/2020-12/schema&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(310,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: id; percent correct: 2; color: red; test: Valid use of empty fragments in location-independent $id; schema: {&quot;$ref&quot;:&quot;https://json-schema.org/draft/2020-12/schema&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(310,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: id; percent correct: 4; color: red; test: Unnormalized $ids are allowed but discouraged; schema: {&quot;$ref&quot;:&quot;https://json-schema.org/draft/2020-12/schema&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(310,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 0; color: orange; test: ignore if without then or else; schema: {&quot;if&quot;:{&quot;const&quot;:0}}; pass: ; fail: ❌ valid when invalid against lone if&#xA;❌ valid when valid against lone if" role="graphics-symbol" aria-roledescription="circle" transform="translate(330,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 2; color: orange; test: ignore then without if; schema: {&quot;then&quot;:{&quot;const&quot;:0}}; pass: ; fail: ❌ valid when invalid against lone then&#xA;❌ valid when valid against lone then" role="graphics-symbol" aria-roledescription="circle" transform="translate(330,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 4; color: orange; test: ignore else without if; schema: {&quot;else&quot;:{&quot;const&quot;:0}}; pass: ; fail: ❌ valid when invalid against lone else&#xA;❌ valid when valid against lone else" role="graphics-symbol" aria-roledescription="circle" transform="translate(330,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 6; color: red; test: validate against correct branch, then vs else; schema: {&quot;else&quot;:{&quot;multipleOf&quot;:2},&quot;if&quot;:{&quot;exclusiveMaximum&quot;:0},&quot;then&quot;:{&quot;minimum&quot;:-10}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(330,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 8; color: orange; test: non-interference across combined schemas; schema: {&quot;allOf&quot;:[{&quot;if&quot;:{&quot;exclusiveMaximum&quot;:0}},{&quot;then&quot;:{&quot;minimum&quot;:-10}},{&quot;else&quot;:{&quot;multipleOf&quot;:2}}]}; pass: ; fail: ❌ valid, but would have been invalid through else&#xA;❌ valid, but would have been invalid through then" role="graphics-symbol" aria-roledescription="circle" transform="translate(330,184)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 34; color: yellow; test: if and then without else; schema: {&quot;if&quot;:{&quot;exclusiveMaximum&quot;:0},&quot;then&quot;:{&quot;minimum&quot;:-10}}; pass: ✅ invalid through then; fail: ❌ valid when if test fails&#xA;❌ valid through then" role="graphics-symbol" aria-roledescription="circle" transform="translate(330,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 36; color: yellow; test: if and else without then; schema: {&quot;else&quot;:{&quot;multipleOf&quot;:2},&quot;if&quot;:{&quot;exclusiveMaximum&quot;:0}}; pass: ✅ invalid through else; fail: ❌ valid through else&#xA;❌ valid when if test passes" role="graphics-symbol" aria-roledescription="circle" transform="translate(330,128)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 50; color: yellow; test: if with boolean schema true; schema: {&quot;else&quot;:{&quot;const&quot;:&quot;else&quot;},&quot;if&quot;:true,&quot;then&quot;:{&quot;const&quot;:&quot;then&quot;}}; pass: ✅ boolean schema true in if always chooses the then path (invalid); fail: ❌ boolean schema true in if always chooses the then path (valid)" role="graphics-symbol" aria-roledescription="circle" transform="translate(330,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 52; color: yellow; test: if with boolean schema false; schema: {&quot;else&quot;:{&quot;const&quot;:&quot;else&quot;},&quot;if&quot;:false,&quot;then&quot;:{&quot;const&quot;:&quot;then&quot;}}; pass: ✅ boolean schema false in if always chooses the else path (invalid); fail: ❌ boolean schema false in if always chooses the else path (valid)" role="graphics-symbol" aria-roledescription="circle" transform="translate(330,96)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 54; color: yellow; test: if appears at the end when serialized (keyword processing sequence); schema: {&quot;else&quot;:{&quot;const&quot;:&quot;other&quot;},&quot;if&quot;:{&quot;maxLength&quot;:4},&quot;then&quot;:{&quot;const&quot;:&quot;yes&quot;}}; pass: ✅ invalid redirects to else and fails&#xA;✅ no redirects to then and fails; fail: ❌ other redirects to else and passes&#xA;❌ yes redirects to then and passes" role="graphics-symbol" aria-roledescription="circle" transform="translate(330,92)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: infinite-loop-detection; percent correct: 100; color: green; test: evaluating the same schema location against the same data location twice is not a sign of an infinite loop; schema: {&quot;$defs&quot;:{&quot;int&quot;:{&quot;type&quot;:&quot;integer&quot;}},&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:{&quot;$ref&quot;:&quot;#/$defs/int&quot;}}},{&quot;additionalProperties&quot;:{&quot;$ref&quot;:&quot;#/$defs/int&quot;}}]}; pass: ✅ failing case&#xA;✅ passing case; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(350,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 0; color: red; test: items and subitems; schema: {&quot;$defs&quot;:{&quot;item&quot;:{&quot;items&quot;:false,&quot;prefixItems&quot;:[{&quot;$ref&quot;:&quot;#/$defs/sub-item&quot;},{&quot;$ref&quot;:&quot;#/$defs/sub-item&quot;}],&quot;type&quot;:&quot;array&quot;},&quot;sub-item&quot;:{&quot;required&quot;:[&quot;foo&quot;],&quot;type&quot;:&quot;object&quot;}},&quot;items&quot;:false,&quot;prefixItems&quot;:[{&quot;$ref&quot;:&quot;#/$defs/item&quot;},{&quot;$ref&quot;:&quot;#/$defs/item&quot;},{&quot;$ref&quot;:&quot;#/$defs/item&quot;}],&quot;type&quot;:&quot;array&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(370,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 2; color: red; test: nested items; schema: {&quot;items&quot;:{&quot;items&quot;:{&quot;items&quot;:{&quot;items&quot;:{&quot;type&quot;:&quot;number&quot;},&quot;type&quot;:&quot;array&quot;},&quot;type&quot;:&quot;array&quot;},&quot;type&quot;:&quot;array&quot;},&quot;type&quot;:&quot;array&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(370,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 4; color: red; test: prefixItems with no additional items allowed; schema: {&quot;items&quot;:false,&quot;prefixItems&quot;:[{},{},{}]}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(370,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 6; color: red; test: items should not look in applicators, valid case; schema: {&quot;allOf&quot;:[{&quot;prefixItems&quot;:[{&quot;minimum&quot;:3}]}],&quot;items&quot;:{&quot;minimum&quot;:5}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(370,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 26; color: yellow; test: a schema given for items; schema: {&quot;items&quot;:{&quot;type&quot;:&quot;integer&quot;}}; pass: ✅ wrong type of items; fail: ❌ JavaScript pseudo-array is valid&#xA;❌ ignores non-arrays&#xA;❌ valid items" role="graphics-symbol" aria-roledescription="circle" transform="translate(370,148)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 50; color: yellow; test: items with boolean schema (true); schema: {&quot;items&quot;:true}; pass: ✅ empty array is valid; fail: ❌ any array is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(370,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 52; color: yellow; test: items with boolean schema (false); schema: {&quot;items&quot;:false}; pass: ✅ any non-empty array is invalid; fail: ❌ empty array is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(370,96)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: maxContains; percent correct: 0; color: orange; test: maxContains without contains is ignored; schema: {&quot;maxContains&quot;:1}; pass: ; fail: ❌ two items still valid against lone maxContains&#xA;❌ one item valid against lone maxContains" role="graphics-symbol" aria-roledescription="circle" transform="translate(390,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: maxContains; percent correct: 2; color: red; test: maxContains with contains; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;maxContains&quot;:1}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(390,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: maxContains; percent correct: 66; color: yellow; test: minContains &lt; maxContains; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;maxContains&quot;:3,&quot;minContains&quot;:1}; pass: ✅ minContains &lt; maxContains &lt; actual&#xA;✅ actual &lt; minContains &lt; maxContains; fail: ❌ minContains &lt; actual &lt; maxContains" role="graphics-symbol" aria-roledescription="circle" transform="translate(390,68)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: maxItems; percent correct: 76; color: yellow; test: maxItems validation; schema: {&quot;maxItems&quot;:2}; pass: ✅ too long is invalid&#xA;✅ exact length is valid&#xA;✅ shorter is valid; fail: ❌ ignores non-arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(410,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: maxLength; percent correct: 60; color: yellow; test: maxLength validation; schema: {&quot;maxLength&quot;:2}; pass: ✅ too long is invalid&#xA;✅ exact length is valid&#xA;✅ shorter is valid; fail: ❌ two supplementary Unicode code points is long enough&#xA;❌ ignores non-strings" role="graphics-symbol" aria-roledescription="circle" transform="translate(430,80)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: maxProperties; percent correct: 50; color: yellow; test: maxProperties validation; schema: {&quot;maxProperties&quot;:2}; pass: ✅ too long is invalid&#xA;✅ exact length is valid&#xA;✅ shorter is valid; fail: ❌ ignores other non-objects&#xA;❌ ignores strings&#xA;❌ ignores arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(450,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: maxProperties; percent correct: 100; color: green; test: maxProperties = 0 means the object is empty; schema: {&quot;maxProperties&quot;:0}; pass: ✅ one property is invalid&#xA;✅ no properties is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(450,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: maximum; percent correct: 26; color: yellow; test: maximum validation with unsigned integer; schema: {&quot;maximum&quot;:300}; pass: ✅ above the maximum is invalid; fail: ❌ boundary point float is valid&#xA;❌ boundary point integer is valid&#xA;❌ below the maximum is invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(470,148)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: maximum; percent correct: 76; color: yellow; test: maximum validation; schema: {&quot;maximum&quot;:3.0}; pass: ✅ above the maximum is invalid&#xA;✅ boundary point is valid&#xA;✅ below the maximum is valid; fail: ❌ ignores non-numbers" role="graphics-symbol" aria-roledescription="circle" transform="translate(470,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: minContains; percent correct: 0; color: orange; test: minContains without contains is ignored; schema: {&quot;minContains&quot;:1}; pass: ; fail: ❌ zero items still valid against lone minContains&#xA;❌ one item valid against lone minContains" role="graphics-symbol" aria-roledescription="circle" transform="translate(490,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: minContains; percent correct: 2; color: orange; test: minContains = 0; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;minContains&quot;:0}; pass: ; fail: ❌ minContains = 0 makes contains always pass&#xA;❌ empty data" role="graphics-symbol" aria-roledescription="circle" transform="translate(490,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: minContains; percent correct: 40; color: yellow; test: minContains=1 with contains; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;minContains&quot;:1}; pass: ✅ no elements match&#xA;✅ empty data; fail: ❌ all elements match, valid minContains&#xA;❌ some elements match, valid minContains&#xA;❌ single element matches, valid minContains" role="graphics-symbol" aria-roledescription="circle" transform="translate(490,120)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: minContains; percent correct: 50; color: yellow; test: minContains=2 with contains; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;minContains&quot;:2}; pass: ✅ some elements match, invalid minContains&#xA;✅ all elements match, invalid minContains&#xA;✅ empty data; fail: ❌ some elements match, valid minContains&#xA;❌ all elements match, valid minContains (more than needed)&#xA;❌ all elements match, valid minContains (exactly as needed)" role="graphics-symbol" aria-roledescription="circle" transform="translate(490,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: minContains; percent correct: 76; color: yellow; test: maxContains = minContains; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;maxContains&quot;:2,&quot;minContains&quot;:2}; pass: ✅ all elements match, invalid maxContains&#xA;✅ all elements match, invalid minContains&#xA;✅ empty data; fail: ❌ all elements match, valid maxContains and minContains" role="graphics-symbol" aria-roledescription="circle" transform="translate(490,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: minContains; percent correct: 78; color: yellow; test: maxContains &lt; minContains; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;maxContains&quot;:1,&quot;minContains&quot;:3}; pass: ✅ invalid maxContains and minContains&#xA;✅ invalid minContains&#xA;✅ empty data; fail: ❌ invalid maxContains" role="graphics-symbol" aria-roledescription="circle" transform="translate(490,43.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: minItems; percent correct: 76; color: yellow; test: minItems validation; schema: {&quot;minItems&quot;:1}; pass: ✅ too short is invalid&#xA;✅ exact length is valid&#xA;✅ longer is valid; fail: ❌ ignores non-arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(510,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: minLength; percent correct: 0; color: red; test: minLength validation; schema: {&quot;minLength&quot;:2}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(530,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: minProperties; percent correct: 50; color: yellow; test: minProperties validation; schema: {&quot;minProperties&quot;:1}; pass: ✅ too short is invalid&#xA;✅ exact length is valid&#xA;✅ longer is valid; fail: ❌ ignores other non-objects&#xA;❌ ignores strings&#xA;❌ ignores arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(550,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: minimum; percent correct: 26; color: yellow; test: minimum validation; schema: {&quot;minimum&quot;:1.1}; pass: ✅ below the minimum is invalid; fail: ❌ ignores non-numbers&#xA;❌ boundary point is valid&#xA;❌ above the minimum is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(570,148)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: minimum; percent correct: 28; color: yellow; test: minimum validation with signed integer; schema: {&quot;minimum&quot;:-2}; pass: ✅ int below the minimum is invalid&#xA;✅ float below the minimum is invalid; fail: ❌ ignores non-numbers&#xA;❌ boundary point with float is valid&#xA;❌ boundary point is valid&#xA;❌ positive above the minimum is valid&#xA;❌ negative above the minimum is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(570,144)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: multipleOf; percent correct: 34; color: yellow; test: by number; schema: {&quot;multipleOf&quot;:1.5}; pass: ✅ 35 is not multiple of 1.5; fail: ❌ 4.5 is multiple of 1.5&#xA;❌ zero is multiple of anything" role="graphics-symbol" aria-roledescription="circle" transform="translate(590,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: multipleOf; percent correct: 50; color: yellow; test: by small number; schema: {&quot;multipleOf&quot;:0.0001}; pass: ✅ 0.00751 is not multiple of 0.0001; fail: ❌ 0.0075 is multiple of 0.0001" role="graphics-symbol" aria-roledescription="circle" transform="translate(590,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: multipleOf; percent correct: 66; color: yellow; test: by int; schema: {&quot;multipleOf&quot;:2}; pass: ✅ int by int fail&#xA;✅ int by int; fail: ❌ ignores non-numbers" role="graphics-symbol" aria-roledescription="circle" transform="translate(590,68)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: multipleOf; percent correct: 100; color: green; test: invalid instance should not raise error when float division = inf; schema: {&quot;multipleOf&quot;:0.123456789,&quot;type&quot;:&quot;integer&quot;}; pass: ✅ always invalid, but naive implementations may raise an overflow error; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(590,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: not; percent correct: 0; color: red; test: not more complex schema; schema: {&quot;not&quot;:{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(610,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: not; percent correct: 2; color: orange; test: not with boolean schema true; schema: {&quot;not&quot;:true}; pass: ; fail: ❌ any value is invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(610,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: not; percent correct: 4; color: orange; test: not with boolean schema false; schema: {&quot;not&quot;:false}; pass: ; fail: ❌ any value is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(610,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: not; percent correct: 100; color: green; test: not; schema: {&quot;not&quot;:{&quot;type&quot;:&quot;integer&quot;}}; pass: ✅ disallowed&#xA;✅ allowed; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(610,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: not; percent correct: 98; color: green; test: not multiple types; schema: {&quot;not&quot;:{&quot;type&quot;:[&quot;integer&quot;,&quot;boolean&quot;]}}; pass: ✅ other mismatch&#xA;✅ mismatch&#xA;✅ valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(610,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: not; percent correct: 96; color: green; test: forbidden property; schema: {&quot;properties&quot;:{&quot;foo&quot;:{&quot;not&quot;:{}}}}; pass: ✅ property absent&#xA;✅ property present; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(610,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 0; color: red; test: oneOf; schema: {&quot;oneOf&quot;:[{&quot;type&quot;:&quot;integer&quot;},{&quot;minimum&quot;:2}]}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(630,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 2; color: red; test: oneOf with base schema; schema: {&quot;oneOf&quot;:[{&quot;minLength&quot;:2},{&quot;maxLength&quot;:4}],&quot;type&quot;:&quot;string&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(630,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 4; color: orange; test: oneOf with boolean schemas, one true; schema: {&quot;oneOf&quot;:[true,false,false]}; pass: ; fail: ❌ any value is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(630,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 50; color: yellow; test: oneOf with empty schema; schema: {&quot;oneOf&quot;:[{&quot;type&quot;:&quot;number&quot;},{}]}; pass: ✅ both valid - invalid; fail: ❌ one valid - valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(630,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 76; color: yellow; test: oneOf complex types; schema: {&quot;oneOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;integer&quot;}},&quot;required&quot;:[&quot;bar&quot;]},{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;foo&quot;]}]}; pass: ✅ neither oneOf valid (complex)&#xA;✅ second oneOf valid (complex)&#xA;✅ first oneOf valid (complex); fail: ❌ both oneOf valid (complex)" role="graphics-symbol" aria-roledescription="circle" transform="translate(630,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 78; color: yellow; test: oneOf with required; schema: {&quot;oneOf&quot;:[{&quot;required&quot;:[&quot;foo&quot;,&quot;bar&quot;]},{&quot;required&quot;:[&quot;foo&quot;,&quot;baz&quot;]}],&quot;type&quot;:&quot;object&quot;}; pass: ✅ second valid - valid&#xA;✅ first valid - valid&#xA;✅ both invalid - invalid; fail: ❌ both valid - invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(630,43.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 80; color: yellow; test: oneOf with missing optional property; schema: {&quot;oneOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:true,&quot;baz&quot;:true},&quot;required&quot;:[&quot;bar&quot;]},{&quot;properties&quot;:{&quot;foo&quot;:true},&quot;required&quot;:[&quot;foo&quot;]}]}; pass: ✅ neither oneOf valid&#xA;✅ second oneOf valid&#xA;✅ first oneOf valid; fail: ❌ both oneOf valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(630,39.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 100; color: green; test: oneOf with boolean schemas, all true; schema: {&quot;oneOf&quot;:[true,true,true]}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(630,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 98; color: green; test: oneOf with boolean schemas, more than one true; schema: {&quot;oneOf&quot;:[true,true,false]}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(630,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 96; color: green; test: oneOf with boolean schemas, all false; schema: {&quot;oneOf&quot;:[false,false,false]}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(630,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 94; color: green; test: nested oneOf, to check validation semantics; schema: {&quot;oneOf&quot;:[{&quot;oneOf&quot;:[{&quot;type&quot;:&quot;null&quot;}]}]}; pass: ✅ anything non-null is invalid&#xA;✅ null is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(630,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: pattern; percent correct: 0; color: red; test: pattern validation; schema: {&quot;pattern&quot;:&quot;^a*$&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(650,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: pattern; percent correct: 2; color: red; test: pattern is not anchored; schema: {&quot;pattern&quot;:&quot;a+&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(650,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: patternProperties; percent correct: 0; color: red; test: patternProperties validates properties matching a regex; schema: {&quot;patternProperties&quot;:{&quot;f.*o&quot;:{&quot;type&quot;:&quot;integer&quot;}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(670,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: patternProperties; percent correct: 2; color: orange; test: multiple simultaneous patternProperties are validated; schema: {&quot;patternProperties&quot;:{&quot;a*&quot;:{&quot;type&quot;:&quot;integer&quot;},&quot;aaa*&quot;:{&quot;maximum&quot;:20}}}; pass: ; fail: ❌ an invalid due to both is invalid&#xA;❌ an invalid due to the other is invalid&#xA;❌ an invalid due to one is invalid&#xA;❌ multiple matches is valid&#xA;❌ a simultaneous match is valid&#xA;❌ a single valid match is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(670,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: patternProperties; percent correct: 4; color: red; test: regexes are not anchored by default and are case sensitive; schema: {&quot;patternProperties&quot;:{&quot;X_&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;[0-9]{2,}&quot;:{&quot;type&quot;:&quot;boolean&quot;}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(670,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: patternProperties; percent correct: 40; color: yellow; test: patternProperties with boolean schemas; schema: {&quot;patternProperties&quot;:{&quot;b.*&quot;:false,&quot;f.*&quot;:true}}; pass: ✅ empty object is valid&#xA;✅ object with property matching schema true is valid; fail: ❌ object with a property matching both true and false is invalid&#xA;❌ object with both properties is invalid&#xA;❌ object with property matching schema false is invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(670,120)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: prefixItems; percent correct: 0; color: red; test: additional items are allowed by default; schema: {&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;integer&quot;}]}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(690,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: prefixItems; percent correct: 16; color: yellow; test: a schema given for prefixItems; schema: {&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;integer&quot;},{&quot;type&quot;:&quot;string&quot;}]}; pass: ✅ wrong types; fail: ❌ JavaScript pseudo-array is valid&#xA;❌ empty array&#xA;❌ array with additional items&#xA;❌ incomplete array of items&#xA;❌ correct types" role="graphics-symbol" aria-roledescription="circle" transform="translate(690,168)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: prefixItems; percent correct: 34; color: yellow; test: prefixItems with boolean schemas; schema: {&quot;prefixItems&quot;:[true,false]}; pass: ✅ array with two items is invalid; fail: ❌ empty array is valid&#xA;❌ array with one item is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(690,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: properties; percent correct: 0; color: red; test: object properties validation; schema: {&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;foo&quot;:{&quot;type&quot;:&quot;integer&quot;}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(710,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: properties; percent correct: 50; color: yellow; test: properties, patternProperties, additionalProperties interaction; schema: {&quot;additionalProperties&quot;:{&quot;type&quot;:&quot;integer&quot;},&quot;patternProperties&quot;:{&quot;f.o&quot;:{&quot;minItems&quot;:2}},&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;array&quot;},&quot;foo&quot;:{&quot;maxItems&quot;:3,&quot;type&quot;:&quot;array&quot;}}}; pass: ✅ additionalProperty validates others&#xA;✅ additionalProperty ignores property&#xA;✅ patternProperty validates nonproperty&#xA;✅ property validates property; fail: ❌ additionalProperty invalidates others&#xA;❌ patternProperty invalidates nonproperty&#xA;❌ patternProperty invalidates property&#xA;❌ property invalidates property" role="graphics-symbol" aria-roledescription="circle" transform="translate(710,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: properties; percent correct: 52; color: yellow; test: properties with boolean schema; schema: {&quot;properties&quot;:{&quot;bar&quot;:false,&quot;foo&quot;:true}}; pass: ✅ both properties present is invalid&#xA;✅ only 'false' property present is invalid; fail: ❌ only 'true' property present is valid&#xA;❌ no property present is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(710,96)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: properties; percent correct: 100; color: green; test: properties with escaped characters; schema: {&quot;properties&quot;:{&quot;foo\tbar&quot;:{&quot;type&quot;:&quot;number&quot;},&quot;foo\nbar&quot;:{&quot;type&quot;:&quot;number&quot;},&quot;foo\fbar&quot;:{&quot;type&quot;:&quot;number&quot;},&quot;foo\rbar&quot;:{&quot;type&quot;:&quot;number&quot;},&quot;foo\&quot;bar&quot;:{&quot;type&quot;:&quot;number&quot;},&quot;foo\\bar&quot;:{&quot;type&quot;:&quot;number&quot;}}}; pass: ✅ object with strings is invalid&#xA;✅ object with all numbers is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(710,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: propertyNames; percent correct: 34; color: yellow; test: propertyNames validation; schema: {&quot;propertyNames&quot;:{&quot;maxLength&quot;:3}}; pass: ✅ object without properties is valid&#xA;✅ all property names valid; fail: ❌ ignores other non-objects&#xA;❌ ignores strings&#xA;❌ ignores arrays&#xA;❌ some property names invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(730,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: propertyNames; percent correct: 50; color: yellow; test: propertyNames with boolean schema false; schema: {&quot;propertyNames&quot;:false}; pass: ✅ empty object is valid; fail: ❌ object with any properties is invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(730,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: propertyNames; percent correct: 100; color: green; test: propertyNames with boolean schema true; schema: {&quot;propertyNames&quot;:true}; pass: ✅ empty object is valid&#xA;✅ object with any properties is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(730,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 0; color: red; test: relative pointer ref to object; schema: {&quot;properties&quot;:{&quot;bar&quot;:{&quot;$ref&quot;:&quot;#/properties/foo&quot;},&quot;foo&quot;:{&quot;type&quot;:&quot;integer&quot;}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 2; color: orange; test: relative pointer ref to array; schema: {&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;integer&quot;},{&quot;$ref&quot;:&quot;#/prefixItems/0&quot;}]}; pass: ; fail: ❌ mismatch array&#xA;❌ match array" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 4; color: orange; test: nested refs; schema: {&quot;$defs&quot;:{&quot;a&quot;:{&quot;type&quot;:&quot;integer&quot;},&quot;b&quot;:{&quot;$ref&quot;:&quot;#/$defs/a&quot;},&quot;c&quot;:{&quot;$ref&quot;:&quot;#/$defs/b&quot;}},&quot;$ref&quot;:&quot;#/$defs/c&quot;}; pass: ; fail: ❌ nested ref invalid&#xA;❌ nested ref valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 6; color: red; test: remote ref, containing refs itself; schema: {&quot;$ref&quot;:&quot;https://json-schema.org/draft/2020-12/schema&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 8; color: orange; test: $ref to boolean schema true; schema: {&quot;$defs&quot;:{&quot;bool&quot;:true},&quot;$ref&quot;:&quot;#/$defs/bool&quot;}; pass: ; fail: ❌ any value is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,184)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 10; color: orange; test: $ref to boolean schema false; schema: {&quot;$defs&quot;:{&quot;bool&quot;:false},&quot;$ref&quot;:&quot;#/$defs/bool&quot;}; pass: ; fail: ❌ any value is invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,180)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 12; color: red; test: refs with quote; schema: {&quot;$defs&quot;:{&quot;foo\&quot;bar&quot;:{&quot;type&quot;:&quot;number&quot;}},&quot;properties&quot;:{&quot;foo\&quot;bar&quot;:{&quot;$ref&quot;:&quot;#/$defs/foo%22bar&quot;}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,176)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 14; color: red; test: naive replacement of $ref with its destination is not correct; schema: {&quot;$defs&quot;:{&quot;a_string&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;enum&quot;:[{&quot;$ref&quot;:&quot;#/$defs/a_string&quot;}]}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,172)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 26; color: yellow; test: root pointer ref; schema: {&quot;additionalProperties&quot;:false,&quot;properties&quot;:{&quot;foo&quot;:{&quot;$ref&quot;:&quot;#&quot;}}}; pass: ✅ mismatch; fail: ❌ recursive mismatch&#xA;❌ recursive match&#xA;❌ match" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,148)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 34; color: yellow; test: ref applies alongside sibling keywords; schema: {&quot;$defs&quot;:{&quot;reffed&quot;:{&quot;type&quot;:&quot;array&quot;}},&quot;properties&quot;:{&quot;foo&quot;:{&quot;$ref&quot;:&quot;#/$defs/reffed&quot;,&quot;maxItems&quot;:2}}}; pass: ✅ ref valid, maxItems valid; fail: ❌ ref invalid&#xA;❌ ref valid, maxItems invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 50; color: yellow; test: escaped pointer ref; schema: {&quot;$defs&quot;:{&quot;percent%field&quot;:{&quot;type&quot;:&quot;integer&quot;},&quot;slash/field&quot;:{&quot;type&quot;:&quot;integer&quot;},&quot;tilde~field&quot;:{&quot;type&quot;:&quot;integer&quot;}},&quot;properties&quot;:{&quot;percent&quot;:{&quot;$ref&quot;:&quot;#/$defs/percent%25field&quot;},&quot;slash&quot;:{&quot;$ref&quot;:&quot;#/$defs/slash~1field&quot;},&quot;tilde&quot;:{&quot;$ref&quot;:&quot;#/$defs/tilde~0field&quot;}}}; pass: ✅ percent invalid&#xA;✅ tilde invalid&#xA;✅ slash invalid; fail: ❌ percent valid&#xA;❌ tilde valid&#xA;❌ slash valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 52; color: yellow; test: property named $ref that is not a reference; schema: {&quot;properties&quot;:{&quot;$ref&quot;:{&quot;type&quot;:&quot;string&quot;}}}; pass: ✅ property named $ref invalid; fail: ❌ property named $ref valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,96)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 54; color: yellow; test: property named $ref, containing an actual $ref; schema: {&quot;$defs&quot;:{&quot;is-string&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;properties&quot;:{&quot;$ref&quot;:{&quot;$ref&quot;:&quot;#/$defs/is-string&quot;}}}; pass: ✅ property named $ref valid; fail: ❌ property named $ref invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,92)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 56; color: yellow; test: Recursive references between schemas; schema: {&quot;$defs&quot;:{&quot;node&quot;:{&quot;$id&quot;:&quot;http://localhost:1234/node&quot;,&quot;description&quot;:&quot;node&quot;,&quot;properties&quot;:{&quot;subtree&quot;:{&quot;$ref&quot;:&quot;tree&quot;},&quot;value&quot;:{&quot;type&quot;:&quot;number&quot;}},&quot;required&quot;:[&quot;value&quot;],&quot;type&quot;:&quot;object&quot;}},&quot;$id&quot;:&quot;http://localhost:1234/tree&quot;,&quot;description&quot;:&quot;tree of nodes&quot;,&quot;properties&quot;:{&quot;meta&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;nodes&quot;:{&quot;items&quot;:{&quot;$ref&quot;:&quot;node&quot;},&quot;type&quot;:&quot;array&quot;}},&quot;required&quot;:[&quot;meta&quot;,&quot;nodes&quot;],&quot;type&quot;:&quot;object&quot;}; pass: ✅ invalid tree; fail: ❌ valid tree" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,87.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 100; color: green; test: ref creates new scope when adjacent to keywords; schema: {&quot;$defs&quot;:{&quot;A&quot;:{&quot;unevaluatedProperties&quot;:false}},&quot;$ref&quot;:&quot;#/$defs/A&quot;,&quot;properties&quot;:{&quot;prop1&quot;:{&quot;type&quot;:&quot;string&quot;}}}; pass: ✅ referenced subschema doesn't see annotations from properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: required; percent correct: 0; color: orange; test: required default validation; schema: {&quot;properties&quot;:{&quot;foo&quot;:{}}}; pass: ; fail: ❌ not required by default" role="graphics-symbol" aria-roledescription="circle" transform="translate(770,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: required; percent correct: 2; color: red; test: required with escaped characters; schema: {&quot;required&quot;:[&quot;foo\nbar&quot;,&quot;foo\&quot;bar&quot;,&quot;foo\\bar&quot;,&quot;foo\rbar&quot;,&quot;foo\tbar&quot;,&quot;foo\fbar&quot;]}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(770,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: required; percent correct: 40; color: yellow; test: required validation; schema: {&quot;properties&quot;:{&quot;bar&quot;:{},&quot;foo&quot;:{}},&quot;required&quot;:[&quot;foo&quot;]}; pass: ✅ non-present required property is invalid&#xA;✅ present required property is valid; fail: ❌ ignores other non-objects&#xA;❌ ignores strings&#xA;❌ ignores arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(770,120)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: required; percent correct: 100; color: green; test: required with empty array; schema: {&quot;properties&quot;:{&quot;foo&quot;:{}},&quot;required&quot;:[]}; pass: ✅ property not required; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(770,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 0; color: red; test: integer type matches integers; schema: {&quot;type&quot;:&quot;integer&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 50; color: yellow; test: type as array with one item; schema: {&quot;type&quot;:[&quot;string&quot;]}; pass: ✅ number is invalid; fail: ❌ string is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(790,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 100; color: green; test: number type matches numbers; schema: {&quot;type&quot;:&quot;number&quot;}; pass: ✅ null is not a number&#xA;✅ a boolean is not a number&#xA;✅ an array is not a number&#xA;✅ an object is not a number&#xA;✅ a string is still not a number, even if it looks like one&#xA;✅ a string is not a number&#xA;✅ a float is a number&#xA;✅ a float with zero fractional part is a number (and an integer)&#xA;✅ an integer is a number; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 98; color: green; test: string type matches strings; schema: {&quot;type&quot;:&quot;string&quot;}; pass: ✅ null is not a string&#xA;✅ a boolean is not a string&#xA;✅ an array is not a string&#xA;✅ an object is not a string&#xA;✅ an empty string is still a string&#xA;✅ a string is still a string, even if it looks like a number&#xA;✅ a string is a string&#xA;✅ a float is not a string&#xA;✅ 1 is not a string; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 96; color: green; test: object type matches objects; schema: {&quot;type&quot;:&quot;object&quot;}; pass: ✅ null is not an object&#xA;✅ a boolean is not an object&#xA;✅ an array is not an object&#xA;✅ an object is an object&#xA;✅ a string is not an object&#xA;✅ a float is not an object&#xA;✅ an integer is not an object; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 94; color: green; test: array type matches arrays; schema: {&quot;type&quot;:&quot;array&quot;}; pass: ✅ null is not an array&#xA;✅ a boolean is not an array&#xA;✅ an array is an array&#xA;✅ an object is not an array&#xA;✅ a string is not an array&#xA;✅ a float is not an array&#xA;✅ an integer is not an array; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 92; color: green; test: boolean type matches booleans; schema: {&quot;type&quot;:&quot;boolean&quot;}; pass: ✅ null is not a boolean&#xA;✅ false is a boolean&#xA;✅ true is a boolean&#xA;✅ an array is not a boolean&#xA;✅ an object is not a boolean&#xA;✅ an empty string is not a boolean&#xA;✅ a string is not a boolean&#xA;✅ a float is not a boolean&#xA;✅ zero is not a boolean&#xA;✅ an integer is not a boolean; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 90; color: green; test: null type matches only the null object; schema: {&quot;type&quot;:&quot;null&quot;}; pass: ✅ null is null&#xA;✅ false is not null&#xA;✅ true is not null&#xA;✅ an array is not null&#xA;✅ an object is not null&#xA;✅ an empty string is not null&#xA;✅ a string is not null&#xA;✅ zero is not null&#xA;✅ a float is not null&#xA;✅ an integer is not null; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,19.999999999999996)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 88; color: green; test: multiple types can be specified in an array; schema: {&quot;type&quot;:[&quot;integer&quot;,&quot;string&quot;]}; pass: ✅ null is invalid&#xA;✅ a boolean is invalid&#xA;✅ an array is invalid&#xA;✅ an object is invalid&#xA;✅ a float is invalid&#xA;✅ a string is valid&#xA;✅ an integer is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,24)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 86; color: green; test: type: array or object; schema: {&quot;type&quot;:[&quot;array&quot;,&quot;object&quot;]}; pass: ✅ null is invalid&#xA;✅ string is invalid&#xA;✅ number is invalid&#xA;✅ object is valid&#xA;✅ array is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,28.000000000000004)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 84; color: green; test: type: array, object or null; schema: {&quot;type&quot;:[&quot;array&quot;,&quot;object&quot;,&quot;null&quot;]}; pass: ✅ string is invalid&#xA;✅ number is invalid&#xA;✅ null is valid&#xA;✅ object is valid&#xA;✅ array is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,32.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 0; color: red; test: unevaluatedItems false; schema: {&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 2; color: red; test: unevaluatedItems with items; schema: {&quot;items&quot;:true,&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;string&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 4; color: red; test: unevaluatedItems with nested tuple; schema: {&quot;allOf&quot;:[{&quot;prefixItems&quot;:[true,{&quot;type&quot;:&quot;number&quot;}]}],&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;string&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 6; color: orange; test: unevaluatedItems with nested items; schema: {&quot;allOf&quot;:[{&quot;items&quot;:true,&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;string&quot;}]}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: ❌ with additional items&#xA;❌ with no additional items" role="graphics-symbol" aria-roledescription="circle" transform="translate(810,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 8; color: red; test: unevaluatedItems with oneOf; schema: {&quot;oneOf&quot;:[{&quot;prefixItems&quot;:[true,{&quot;const&quot;:&quot;bar&quot;}]},{&quot;prefixItems&quot;:[true,{&quot;const&quot;:&quot;baz&quot;}]}],&quot;prefixItems&quot;:[{&quot;const&quot;:&quot;foo&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,184)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 10; color: red; test: unevaluatedItems with not; schema: {&quot;not&quot;:{&quot;not&quot;:{&quot;prefixItems&quot;:[true,{&quot;const&quot;:&quot;bar&quot;}]}},&quot;prefixItems&quot;:[{&quot;const&quot;:&quot;foo&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,180)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 12; color: red; test: unevaluatedItems with if/then/else; schema: {&quot;else&quot;:{&quot;prefixItems&quot;:[true,true,true,{&quot;const&quot;:&quot;else&quot;}]},&quot;if&quot;:{&quot;prefixItems&quot;:[true,{&quot;const&quot;:&quot;bar&quot;}]},&quot;prefixItems&quot;:[{&quot;const&quot;:&quot;foo&quot;}],&quot;then&quot;:{&quot;prefixItems&quot;:[true,true,{&quot;const&quot;:&quot;then&quot;}]},&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,176)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 14; color: red; test: unevaluatedItems with $ref; schema: {&quot;$defs&quot;:{&quot;bar&quot;:{&quot;prefixItems&quot;:[true,{&quot;type&quot;:&quot;string&quot;}]}},&quot;$ref&quot;:&quot;#/$defs/bar&quot;,&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;string&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,172)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 50; color: yellow; test: unevaluatedItems with tuple; schema: {&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;string&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ✅ with no unevaluated items; fail: ❌ with unevaluated items" role="graphics-symbol" aria-roledescription="circle" transform="translate(810,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 52; color: yellow; test: unevaluatedItems with nested unevaluatedItems; schema: {&quot;allOf&quot;:[{&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;string&quot;}]},{&quot;unevaluatedItems&quot;:true}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ✅ with no additional items; fail: ❌ with additional items" role="graphics-symbol" aria-roledescription="circle" transform="translate(810,96)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 54; color: yellow; test: unevaluatedItems with anyOf; schema: {&quot;anyOf&quot;:[{&quot;prefixItems&quot;:[true,{&quot;const&quot;:&quot;bar&quot;}]},{&quot;prefixItems&quot;:[true,true,{&quot;const&quot;:&quot;baz&quot;}]}],&quot;prefixItems&quot;:[{&quot;const&quot;:&quot;foo&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ✅ when two schemas match and has unevaluated items&#xA;✅ when one schema matches and has unevaluated items; fail: ❌ when two schemas match and has no unevaluated items&#xA;❌ when one schema matches and has no unevaluated items" role="graphics-symbol" aria-roledescription="circle" transform="translate(810,92)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 56; color: yellow; test: unevaluatedItems with boolean schemas; schema: {&quot;allOf&quot;:[true],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ✅ with no unevaluated items; fail: ❌ with unevaluated items" role="graphics-symbol" aria-roledescription="circle" transform="translate(810,87.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 100; color: green; test: unevaluatedItems true; schema: {&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:true}; pass: ✅ with unevaluated items&#xA;✅ with no unevaluated items; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 98; color: green; test: unevaluatedItems as schema; schema: {&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:{&quot;type&quot;:&quot;string&quot;}}; pass: ✅ with invalid unevaluated items&#xA;✅ with valid unevaluated items&#xA;✅ with no unevaluated items; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 96; color: green; test: unevaluatedItems with uniform items; schema: {&quot;items&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ✅ unevaluatedItems doesn't apply; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 94; color: green; test: unevaluatedItems can't see inside cousins; schema: {&quot;allOf&quot;:[{&quot;prefixItems&quot;:[true]},{&quot;unevaluatedItems&quot;:false}]}; pass: ✅ always fails; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 0; color: red; test: unevaluatedProperties with adjacent patternProperties; schema: {&quot;patternProperties&quot;:{&quot;^foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 2; color: orange; test: unevaluatedProperties with adjacent additionalProperties; schema: {&quot;additionalProperties&quot;:true,&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ; fail: ❌ with additional properties&#xA;❌ with no additional properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 4; color: orange; test: unevaluatedProperties with not; schema: {&quot;not&quot;:{&quot;not&quot;:{&quot;properties&quot;:{&quot;bar&quot;:{&quot;const&quot;:&quot;bar&quot;}},&quot;required&quot;:[&quot;bar&quot;]}},&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ; fail: ❌ with unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 6; color: red; test: unevaluatedProperties with if/then/else; schema: {&quot;else&quot;:{&quot;properties&quot;:{&quot;baz&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;baz&quot;]},&quot;if&quot;:{&quot;properties&quot;:{&quot;foo&quot;:{&quot;const&quot;:&quot;then&quot;}},&quot;required&quot;:[&quot;foo&quot;]},&quot;then&quot;:{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;bar&quot;]},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 8; color: red; test: unevaluatedProperties with $ref; schema: {&quot;$defs&quot;:{&quot;bar&quot;:{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;string&quot;}}}},&quot;$ref&quot;:&quot;#/$defs/bar&quot;,&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,184)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 10; color: orange; test: unevaluatedProperties can't see inside cousins; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:true}},{&quot;unevaluatedProperties&quot;:false}]}; pass: ; fail: ❌ always fails" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,180)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 12; color: red; test: nested unevaluatedProperties, outer true, inner false, properties outside; schema: {&quot;allOf&quot;:[{&quot;unevaluatedProperties&quot;:false}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:true}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,176)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 14; color: red; test: cousin unevaluatedProperties, true and false, false with properties; schema: {&quot;allOf&quot;:[{&quot;unevaluatedProperties&quot;:true},{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;unevaluatedProperties&quot;:false}],&quot;type&quot;:&quot;object&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,172)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 34; color: yellow; test: unevaluatedProperties schema; schema: {&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:{&quot;minLength&quot;:3,&quot;type&quot;:&quot;string&quot;}}; pass: ✅ with valid unevaluated properties; fail: ❌ with invalid unevaluated properties&#xA;❌ with no unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 50; color: yellow; test: unevaluatedProperties false; schema: {&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with no unevaluated properties; fail: ❌ with unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 52; color: yellow; test: unevaluatedProperties with adjacent properties; schema: {&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with no unevaluated properties; fail: ❌ with unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,96)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 54; color: yellow; test: unevaluatedProperties with nested properties; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;string&quot;}}}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with no additional properties; fail: ❌ with additional properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,92)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 56; color: yellow; test: unevaluatedProperties with nested patternProperties; schema: {&quot;allOf&quot;:[{&quot;patternProperties&quot;:{&quot;^bar&quot;:{&quot;type&quot;:&quot;string&quot;}}}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with no additional properties; fail: ❌ with additional properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,87.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 58; color: yellow; test: unevaluatedProperties with nested additionalProperties; schema: {&quot;allOf&quot;:[{&quot;additionalProperties&quot;:true}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with no additional properties; fail: ❌ with additional properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,84.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 60; color: yellow; test: unevaluatedProperties with nested unevaluatedProperties; schema: {&quot;allOf&quot;:[{&quot;unevaluatedProperties&quot;:true}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:{&quot;maxLength&quot;:2,&quot;type&quot;:&quot;string&quot;}}; pass: ✅ with no nested unevaluated properties; fail: ❌ with nested unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,80)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 62; color: yellow; test: unevaluatedProperties with anyOf; schema: {&quot;anyOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:{&quot;const&quot;:&quot;bar&quot;}},&quot;required&quot;:[&quot;bar&quot;]},{&quot;properties&quot;:{&quot;baz&quot;:{&quot;const&quot;:&quot;baz&quot;}},&quot;required&quot;:[&quot;baz&quot;]},{&quot;properties&quot;:{&quot;quux&quot;:{&quot;const&quot;:&quot;quux&quot;}},&quot;required&quot;:[&quot;quux&quot;]}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ when two match and has no unevaluated properties&#xA;✅ when one matches and has no unevaluated properties; fail: ❌ when two match and has unevaluated properties&#xA;❌ when one matches and has unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,76)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 64; color: yellow; test: unevaluatedProperties with oneOf; schema: {&quot;oneOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:{&quot;const&quot;:&quot;bar&quot;}},&quot;required&quot;:[&quot;bar&quot;]},{&quot;properties&quot;:{&quot;baz&quot;:{&quot;const&quot;:&quot;baz&quot;}},&quot;required&quot;:[&quot;baz&quot;]}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with unevaluated properties; fail: ❌ with no unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,72)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 66; color: yellow; test: unevaluatedProperties with dependentSchemas; schema: {&quot;dependentSchemas&quot;:{&quot;foo&quot;:{&quot;properties&quot;:{&quot;bar&quot;:{&quot;const&quot;:&quot;bar&quot;}},&quot;required&quot;:[&quot;bar&quot;]}},&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with no unevaluated properties; fail: ❌ with unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,68)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 68; color: yellow; test: unevaluatedProperties with boolean schemas; schema: {&quot;allOf&quot;:[true],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with no unevaluated properties; fail: ❌ with unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,63.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 70; color: yellow; test: nested unevaluatedProperties, outer false, inner true, properties inside; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;unevaluatedProperties&quot;:true}],&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with no nested unevaluated properties; fail: ❌ with nested unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,60.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 72; color: yellow; test: nested unevaluatedProperties, outer true, inner false, properties inside; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;unevaluatedProperties&quot;:false}],&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:true}; pass: ✅ with no nested unevaluated properties; fail: ❌ with nested unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,56.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 100; color: green; test: unevaluatedProperties true; schema: {&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:true}; pass: ✅ with unevaluated properties&#xA;✅ with no unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 98; color: green; test: nested unevaluatedProperties, outer false, inner true, properties outside; schema: {&quot;allOf&quot;:[{&quot;unevaluatedProperties&quot;:true}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with nested unevaluated properties&#xA;✅ with no nested unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 96; color: green; test: cousin unevaluatedProperties, true and false, true with properties; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;unevaluatedProperties&quot;:true},{&quot;unevaluatedProperties&quot;:false}],&quot;type&quot;:&quot;object&quot;}; pass: ✅ with nested unevaluated properties&#xA;✅ with no nested unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: uniqueItems; percent correct: 0; color: red; test: uniqueItems with an array of items; schema: {&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;boolean&quot;},{&quot;type&quot;:&quot;boolean&quot;}],&quot;uniqueItems&quot;:true}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(850,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: uniqueItems; percent correct: 2; color: orange; test: uniqueItems=false validation; schema: {&quot;uniqueItems&quot;:false}; pass: ; fail: ❌ non-unique heterogeneous types are valid&#xA;❌ unique heterogeneous types are valid&#xA;❌ 0 and false are unique&#xA;❌ 1 and true are unique&#xA;❌ non-unique array of arrays is valid&#xA;❌ unique array of arrays is valid&#xA;❌ non-unique array of nested objects is valid&#xA;❌ unique array of nested objects is valid&#xA;❌ non-unique array of objects is valid&#xA;❌ unique array of objects is valid&#xA;❌ true is not equal to one&#xA;❌ false is not equal to zero&#xA;❌ numbers are unique if mathematically unequal&#xA;❌ non-unique array of integers is valid&#xA;❌ unique array of integers is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(850,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: uniqueItems; percent correct: 4; color: red; test: uniqueItems=false with an array of items; schema: {&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;boolean&quot;},{&quot;type&quot;:&quot;boolean&quot;}],&quot;uniqueItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(850,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: uniqueItems; percent correct: 6; color: red; test: uniqueItems=false with an array of items and additionalItems=false; schema: {&quot;items&quot;:false,&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;boolean&quot;},{&quot;type&quot;:&quot;boolean&quot;}],&quot;uniqueItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(850,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: uniqueItems; percent correct: 60; color: yellow; test: uniqueItems with an array of items and additionalItems=false; schema: {&quot;items&quot;:false,&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;boolean&quot;},{&quot;type&quot;:&quot;boolean&quot;}],&quot;uniqueItems&quot;:true}; pass: ✅ extra items are invalid even if unique&#xA;✅ [true, true] from items array is not valid&#xA;✅ [false, false] from items array is not valid; fail: ❌ [true, false] from items array is valid&#xA;❌ [false, true] from items array is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(850,80)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: uniqueItems; percent correct: 100; color: green; test: uniqueItems validation; schema: {&quot;uniqueItems&quot;:true}; pass: ✅ {&quot;a&quot;: true} and {&quot;a&quot;: 1} are unique&#xA;✅ {&quot;a&quot;: false} and {&quot;a&quot;: 0} are unique&#xA;✅ objects are non-unique despite key order&#xA;✅ different objects are unique&#xA;✅ non-unique heterogeneous types are invalid&#xA;✅ unique heterogeneous types are valid&#xA;✅ nested [0] and [false] are unique&#xA;✅ nested [1] and [true] are unique&#xA;✅ [0] and [false] are unique&#xA;✅ [1] and [true] are unique&#xA;✅ 0 and false are unique&#xA;✅ 1 and true are unique&#xA;✅ non-unique array of arrays is invalid&#xA;✅ unique array of arrays is valid&#xA;✅ non-unique array of nested objects is invalid&#xA;✅ unique array of nested objects is valid&#xA;✅ non-unique array of objects is invalid&#xA;✅ unique array of objects is valid&#xA;✅ true is not equal to one&#xA;✅ false is not equal to zero&#xA;✅ numbers are unique if mathematically unequal&#xA;✅ non-unique array of integers is invalid&#xA;✅ unique array of integers is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(850,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/></g><g class="mark-group role-title"><g transform="translate(402,-28)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" pointer-events="none"/><g><g class="mark-text role-title-text" role="graphics-symbol" aria-roledescription="title" aria-label="Title text 'gpt-3.5'" pointer-events="none"><text text-anchor="middle" transform="translate(0,14)" font-family="Inter" font-size="18px" font-weight="400" fill="#445668" opacity="1">gpt-3.5</text></g></g><path class="foreground" aria-hidden="true" d="" pointer-events="none" display="none"/></g></g></g><path class="foreground" aria-hidden="true" d="" display="none"/></g></g><g class="mark-group role-scope concat_1_group" role="graphics-object" aria-roledescription="group mark container"><g transform="translate(0,364)"><path class="background" aria-hidden="true" d="M0.5,0.5h860v200h-860Z" stroke="#ddd"/><g><g class="mark-group role-axis" aria-hidden="true"><g transform="translate(0.5,0.5)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" pointer-events="none"/><g><g class="mark-rule role-axis-grid" pointer-events="none"><line transform="translate(0,200)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/><line transform="translate(0,160)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/><line transform="translate(0,120)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/><line transform="translate(0,80)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/><line transform="translate(0,40)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/><line transform="translate(0,0)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/></g></g><path class="foreground" aria-hidden="true" d="" pointer-events="none" display="none"/></g></g><g class="mark-group role-axis" role="graphics-symbol" aria-roledescription="axis" aria-label="X-axis for a discrete scale with 43 values: additionalProperties, allOf, anyOf, boolean_schema, const, ending with uniqueItems"><g transform="translate(0.5,200.5)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" pointer-events="none"/><g><g class="mark-rule role-axis-tick" pointer-events="none"><line transform="translate(10,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(30,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(50,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(70,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(90,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(110,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(130,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(150,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(170,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(190,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(210,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(230,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(250,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(270,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(290,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(310,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(330,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(350,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(370,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(390,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(410,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(430,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(450,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(470,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(490,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(510,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(530,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(550,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(570,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(590,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(610,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(630,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(650,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(670,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(690,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(710,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(730,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(750,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(770,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(790,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(810,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(830,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(850,0)" x2="0" y2="5" stroke="#888" stroke-width="1" opacity="1"/></g><g class="mark-text role-axis-label" pointer-events="none"><text text-anchor="end" transform="translate(10,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">additionalProperties</text><text text-anchor="end" transform="translate(30,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">allOf</text><text text-anchor="end" transform="translate(50,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">anyOf</text><text text-anchor="end" transform="translate(70,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">boolean_schema</text><text text-anchor="end" transform="translate(90,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">const</text><text text-anchor="end" transform="translate(110,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">contains</text><text text-anchor="end" transform="translate(130,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">content</text><text text-anchor="end" transform="translate(150,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">default</text><text text-anchor="end" transform="translate(170,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">defs</text><text text-anchor="end" transform="translate(190,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">dependentRequired</text><text text-anchor="end" transform="translate(210,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">dependentSchemas</text><text text-anchor="end" transform="translate(230,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">enum</text><text text-anchor="end" transform="translate(250,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">exclusiveMaximum</text><text text-anchor="end" transform="translate(270,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">exclusiveMinimum</text><text text-anchor="end" transform="translate(290,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">format</text><text text-anchor="end" transform="translate(310,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">id</text><text text-anchor="end" transform="translate(330,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">if-then-else</text><text text-anchor="end" transform="translate(350,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">infinite-loop-detection</text><text text-anchor="end" transform="translate(370,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">items</text><text text-anchor="end" transform="translate(390,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">maxContains</text><text text-anchor="end" transform="translate(410,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">maxItems</text><text text-anchor="end" transform="translate(430,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">maxLength</text><text text-anchor="end" transform="translate(450,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">maxProperties</text><text text-anchor="end" transform="translate(470,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">maximum</text><text text-anchor="end" transform="translate(490,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">minContains</text><text text-anchor="end" transform="translate(510,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">minItems</text><text text-anchor="end" transform="translate(530,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">minLength</text><text text-anchor="end" transform="translate(550,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">minProperties</text><text text-anchor="end" transform="translate(570,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">minimum</text><text text-anchor="end" transform="translate(590,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">multipleOf</text><text text-anchor="end" transform="translate(610,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">not</text><text text-anchor="end" transform="translate(630,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">oneOf</text><text text-anchor="end" transform="translate(650,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">pattern</text><text text-anchor="end" transform="translate(670,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">patternProperties</text><text text-anchor="end" transform="translate(690,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">prefixItems</text><text text-anchor="end" transform="translate(710,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">properties</text><text text-anchor="end" transform="translate(730,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">propertyNames</text><text text-anchor="end" transform="translate(750,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">ref</text><text text-anchor="end" transform="translate(770,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">required</text><text text-anchor="end" transform="translate(790,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">type</text><text text-anchor="end" transform="translate(810,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">unevaluatedItems</text><text text-anchor="end" transform="translate(830,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">unevaluatedProperties</text><text text-anchor="end" transform="translate(850,7) rotate(270) translate(0,3)" font-family="sans-serif" font-size="10px" fill="#000" opacity="1">uniqueItems</text></g><g class="mark-rule role-axis-domain" pointer-events="none"><line transform="translate(0,0)" x2="860" y2="0" stroke="#e1e8f0" stroke-width="1" opacity="1"/></g></g><path class="foreground" aria-hidden="true" d="" pointer-events="none" display="none"/></g></g><g class="mark-group role-axis" role="graphics-symbol" aria-roledescription="axis" aria-label="Y-axis titled 'percent correct' for a linear scale with values from 0 to 100"><g transform="translate(0.5,0.5)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" pointer-events="none"/><g><g class="mark-rule role-axis-tick" pointer-events="none"><line transform="translate(0,200)" x2="-5" y2="0" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(0,160)" x2="-5" y2="0" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(0,120)" x2="-5" y2="0" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(0,80)" x2="-5" y2="0" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(0,40)" x2="-5" y2="0" stroke="#888" stroke-width="1" opacity="1"/><line transform="translate(0,0)" x2="-5" y2="0" stroke="#888" stroke-width="1" opacity="1"/></g><g class="mark-text role-axis-label" pointer-events="none"><text text-anchor="end" transform="translate(-13,204)" font-family="sans-serif" font-size="12px" fill="#000" opacity="1">0</text><text text-anchor="end" transform="translate(-13,164)" font-family="sans-serif" font-size="12px" fill="#000" opacity="1">20</text><text text-anchor="end" transform="translate(-13,124)" font-family="sans-serif" font-size="12px" fill="#000" opacity="1">40</text><text text-anchor="end" transform="translate(-13,84)" font-family="sans-serif" font-size="12px" fill="#000" opacity="1">60</text><text text-anchor="end" transform="translate(-13,43.99999999999999)" font-family="sans-serif" font-size="12px" fill="#000" opacity="1">80</text><text text-anchor="end" transform="translate(-13,4)" font-family="sans-serif" font-size="12px" fill="#000" opacity="1">100</text></g><g class="mark-rule role-axis-domain" pointer-events="none"><line transform="translate(0,200)" x2="0" y2="-200" stroke="#888" stroke-width="1" opacity="1"/></g><g class="mark-text role-axis-title" pointer-events="none"><text text-anchor="middle" transform="translate(-43,100) rotate(-90) translate(0,-3)" font-family="sans-serif" font-size="12px" font-weight="400" fill="#1c2a3a" opacity="1">percent correct</text></g></g><path class="foreground" aria-hidden="true" d="" pointer-events="none" display="none"/></g></g><g class="mark-symbol role-mark concat_1_marks" role="graphics-object" aria-roledescription="symbol mark container"><path aria-label="group: additionalProperties; percent correct: 0; color: red; test: additionalProperties allows a schema which should validate; schema: {&quot;additionalProperties&quot;:{&quot;type&quot;:&quot;boolean&quot;},&quot;properties&quot;:{&quot;bar&quot;:{},&quot;foo&quot;:{}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(10,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: additionalProperties; percent correct: 2; color: red; test: additionalProperties can exist by itself; schema: {&quot;additionalProperties&quot;:{&quot;type&quot;:&quot;boolean&quot;}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(10,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: additionalProperties; percent correct: 4; color: orange; test: additionalProperties are allowed by default; schema: {&quot;properties&quot;:{&quot;bar&quot;:{},&quot;foo&quot;:{}}}; pass: ; fail: ❌ additional properties are allowed" role="graphics-symbol" aria-roledescription="circle" transform="translate(10,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: additionalProperties; percent correct: 6; color: red; test: additionalProperties should not look in applicators; schema: {&quot;additionalProperties&quot;:{&quot;type&quot;:&quot;boolean&quot;},&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:{}}}]}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(10,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: additionalProperties; percent correct: 16; color: yellow; test: additionalProperties being false does not allow other properties; schema: {&quot;additionalProperties&quot;:false,&quot;patternProperties&quot;:{&quot;^v&quot;:{}},&quot;properties&quot;:{&quot;bar&quot;:{},&quot;foo&quot;:{}}}; pass: ✅ an additional property is invalid; fail: ❌ patternProperties are not additional properties&#xA;❌ ignores other non-objects&#xA;❌ ignores strings&#xA;❌ ignores arrays&#xA;❌ no additional properties is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(10,168)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: additionalProperties; percent correct: 100; color: green; test: non-ASCII pattern with additionalProperties; schema: {&quot;additionalProperties&quot;:false,&quot;patternProperties&quot;:{&quot;^á&quot;:{}}}; pass: ✅ not matching the pattern is invalid&#xA;✅ matching the pattern is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(10,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 0; color: red; test: allOf; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;integer&quot;}},&quot;required&quot;:[&quot;bar&quot;]},{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;foo&quot;]}]}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 76; color: yellow; test: allOf combined with anyOf, oneOf; schema: {&quot;allOf&quot;:[{&quot;multipleOf&quot;:2}],&quot;anyOf&quot;:[{&quot;multipleOf&quot;:3}],&quot;oneOf&quot;:[{&quot;multipleOf&quot;:5}]}; pass: ✅ allOf: true, anyOf: true, oneOf: true&#xA;✅ allOf: true, anyOf: false, oneOf: false&#xA;✅ allOf: false, anyOf: true, oneOf: true&#xA;✅ allOf: false, anyOf: true, oneOf: false&#xA;✅ allOf: false, anyOf: false, oneOf: true&#xA;✅ allOf: false, anyOf: false, oneOf: false; fail: ❌ allOf: true, anyOf: true, oneOf: false&#xA;❌ allOf: true, anyOf: false, oneOf: true" role="graphics-symbol" aria-roledescription="circle" transform="translate(30,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 100; color: green; test: allOf with base schema; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;foo&quot;]},{&quot;properties&quot;:{&quot;baz&quot;:{&quot;type&quot;:&quot;null&quot;}},&quot;required&quot;:[&quot;baz&quot;]}],&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;integer&quot;}},&quot;required&quot;:[&quot;bar&quot;]}; pass: ✅ mismatch both&#xA;✅ mismatch second allOf&#xA;✅ mismatch first allOf&#xA;✅ mismatch base schema&#xA;✅ valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 98; color: green; test: allOf simple types; schema: {&quot;allOf&quot;:[{&quot;maximum&quot;:30},{&quot;minimum&quot;:20}]}; pass: ✅ mismatch one&#xA;✅ valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 96; color: green; test: allOf with boolean schemas, all true; schema: {&quot;allOf&quot;:[true,true]}; pass: ✅ any value is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 94; color: green; test: allOf with boolean schemas, some false; schema: {&quot;allOf&quot;:[true,false]}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 92; color: green; test: allOf with boolean schemas, all false; schema: {&quot;allOf&quot;:[false,false]}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 90; color: green; test: allOf with one empty schema; schema: {&quot;allOf&quot;:[{}]}; pass: ✅ any data is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,19.999999999999996)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 88; color: green; test: allOf with two empty schemas; schema: {&quot;allOf&quot;:[{},{}]}; pass: ✅ any data is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,24)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 86; color: green; test: allOf with the first empty schema; schema: {&quot;allOf&quot;:[{},{&quot;type&quot;:&quot;number&quot;}]}; pass: ✅ string is invalid&#xA;✅ number is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,28.000000000000004)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 84; color: green; test: allOf with the last empty schema; schema: {&quot;allOf&quot;:[{&quot;type&quot;:&quot;number&quot;},{}]}; pass: ✅ string is invalid&#xA;✅ number is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,32.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: allOf; percent correct: 82; color: green; test: nested allOf, to check validation semantics; schema: {&quot;allOf&quot;:[{&quot;allOf&quot;:[{&quot;type&quot;:&quot;null&quot;}]}]}; pass: ✅ anything non-null is invalid&#xA;✅ null is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(30,36.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 0; color: red; test: anyOf with base schema; schema: {&quot;anyOf&quot;:[{&quot;maxLength&quot;:2},{&quot;minLength&quot;:4}],&quot;type&quot;:&quot;string&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(50,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 100; color: green; test: anyOf; schema: {&quot;anyOf&quot;:[{&quot;type&quot;:&quot;integer&quot;},{&quot;minimum&quot;:2}]}; pass: ✅ neither anyOf valid&#xA;✅ both anyOf valid&#xA;✅ second anyOf valid&#xA;✅ first anyOf valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(50,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 98; color: green; test: anyOf with boolean schemas, all true; schema: {&quot;anyOf&quot;:[true,true]}; pass: ✅ any value is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(50,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 96; color: green; test: anyOf with boolean schemas, some true; schema: {&quot;anyOf&quot;:[true,false]}; pass: ✅ any value is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(50,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 94; color: green; test: anyOf with boolean schemas, all false; schema: {&quot;anyOf&quot;:[false,false]}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(50,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 92; color: green; test: anyOf complex types; schema: {&quot;anyOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;integer&quot;}},&quot;required&quot;:[&quot;bar&quot;]},{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;foo&quot;]}]}; pass: ✅ neither anyOf valid (complex)&#xA;✅ both anyOf valid (complex)&#xA;✅ second anyOf valid (complex)&#xA;✅ first anyOf valid (complex); fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(50,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 90; color: green; test: anyOf with one empty schema; schema: {&quot;anyOf&quot;:[{&quot;type&quot;:&quot;number&quot;},{}]}; pass: ✅ number is valid&#xA;✅ string is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(50,19.999999999999996)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: anyOf; percent correct: 88; color: green; test: nested anyOf, to check validation semantics; schema: {&quot;anyOf&quot;:[{&quot;anyOf&quot;:[{&quot;type&quot;:&quot;null&quot;}]}]}; pass: ✅ anything non-null is invalid&#xA;✅ null is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(50,24)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: boolean_schema; percent correct: 100; color: green; test: boolean schema 'true'; schema: true; pass: ✅ empty array is valid&#xA;✅ array is valid&#xA;✅ empty object is valid&#xA;✅ object is valid&#xA;✅ null is valid&#xA;✅ boolean false is valid&#xA;✅ boolean true is valid&#xA;✅ string is valid&#xA;✅ number is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(70,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: boolean_schema; percent correct: 98; color: green; test: boolean schema 'false'; schema: false; pass: ✅ empty array is invalid&#xA;✅ array is invalid&#xA;✅ empty object is invalid&#xA;✅ object is invalid&#xA;✅ null is invalid&#xA;✅ boolean false is invalid&#xA;✅ boolean true is invalid&#xA;✅ string is invalid&#xA;✅ number is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(70,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 66; color: yellow; test: const with 1 does not match true; schema: {&quot;const&quot;:1}; pass: ✅ integer one is valid&#xA;✅ true is invalid; fail: ❌ float one is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(90,68)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 76; color: yellow; test: float and integers are equal up to 64-bit representation limits; schema: {&quot;const&quot;:9007199254740992}; pass: ✅ float minus one is invalid&#xA;✅ integer minus one is invalid&#xA;✅ integer is valid; fail: ❌ float is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(90,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 84; color: yellow; test: const with 0 does not match other zero-like types; schema: {&quot;const&quot;:0}; pass: ✅ empty string is invalid&#xA;✅ empty array is invalid&#xA;✅ empty object is invalid&#xA;✅ integer zero is valid&#xA;✅ false is invalid; fail: ❌ float zero is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(90,32.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 100; color: green; test: const validation; schema: {&quot;const&quot;:2}; pass: ✅ another type is invalid&#xA;✅ another value is invalid&#xA;✅ same value is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 98; color: green; test: const with object; schema: {&quot;const&quot;:{&quot;baz&quot;:&quot;bax&quot;,&quot;foo&quot;:&quot;bar&quot;}}; pass: ✅ another type is invalid&#xA;✅ another object is invalid&#xA;✅ same object with different property order is valid&#xA;✅ same object is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 96; color: green; test: const with array; schema: {&quot;const&quot;:[{&quot;foo&quot;:&quot;bar&quot;}]}; pass: ✅ array with additional items is invalid&#xA;✅ another array item is invalid&#xA;✅ same array is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 94; color: green; test: const with null; schema: {&quot;const&quot;:null}; pass: ✅ not null is invalid&#xA;✅ null is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 92; color: green; test: const with false does not match 0; schema: {&quot;const&quot;:false}; pass: ✅ float zero is invalid&#xA;✅ integer zero is invalid&#xA;✅ false is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 90; color: green; test: const with true does not match 1; schema: {&quot;const&quot;:true}; pass: ✅ float one is invalid&#xA;✅ integer one is invalid&#xA;✅ true is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,19.999999999999996)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 88; color: green; test: const with [false] does not match [0]; schema: {&quot;const&quot;:[false]}; pass: ✅ [0.0] is invalid&#xA;✅ [0] is invalid&#xA;✅ [false] is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,24)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 86; color: green; test: const with [true] does not match [1]; schema: {&quot;const&quot;:[true]}; pass: ✅ [1.0] is invalid&#xA;✅ [1] is invalid&#xA;✅ [true] is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,28.000000000000004)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 82; color: green; test: const with {&quot;a&quot;: false} does not match {&quot;a&quot;: 0}; schema: {&quot;const&quot;:{&quot;a&quot;:false}}; pass: ✅ {&quot;a&quot;: 0.0} is invalid&#xA;✅ {&quot;a&quot;: 0} is invalid&#xA;✅ {&quot;a&quot;: false} is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,36.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 80; color: green; test: const with {&quot;a&quot;: true} does not match {&quot;a&quot;: 1}; schema: {&quot;const&quot;:{&quot;a&quot;:true}}; pass: ✅ {&quot;a&quot;: 1.0} is invalid&#xA;✅ {&quot;a&quot;: 1} is invalid&#xA;✅ {&quot;a&quot;: true} is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,39.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 78; color: green; test: const with -2.0 matches integer and float types; schema: {&quot;const&quot;:-2.0}; pass: ✅ float -2.00001 is invalid&#xA;✅ float 2.0 is invalid&#xA;✅ float -2.0 is valid&#xA;✅ integer 2 is invalid&#xA;✅ integer -2 is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,43.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: const; percent correct: 74; color: green; test: nul characters in strings; schema: {&quot;const&quot;:&quot;hello\u0000there&quot;}; pass: ✅ do not match string lacking nul&#xA;✅ match string with nul; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(90,52)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: contains; percent correct: 0; color: red; test: items + contains; schema: {&quot;contains&quot;:{&quot;multipleOf&quot;:3},&quot;items&quot;:{&quot;multipleOf&quot;:2}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(110,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: contains; percent correct: 34; color: yellow; test: contains keyword validation; schema: {&quot;contains&quot;:{&quot;minimum&quot;:5}}; pass: ✅ empty array is invalid&#xA;✅ array without items matching schema is invalid; fail: ❌ not array is valid&#xA;❌ array with two items matching schema (5, 6) is valid&#xA;❌ array with item matching schema (6) is valid&#xA;❌ array with item matching schema (5) is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(110,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: contains; percent correct: 36; color: yellow; test: contains keyword with boolean schema false; schema: {&quot;contains&quot;:false}; pass: ✅ any non-empty array is invalid; fail: ❌ non-arrays are valid&#xA;❌ empty array is invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(110,128)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: contains; percent correct: 100; color: green; test: contains keyword with const keyword; schema: {&quot;contains&quot;:{&quot;const&quot;:5}}; pass: ✅ array without item 5 is invalid&#xA;✅ array with two items 5 is valid&#xA;✅ array with item 5 is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(110,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: contains; percent correct: 98; color: green; test: contains keyword with boolean schema true; schema: {&quot;contains&quot;:true}; pass: ✅ empty array is invalid&#xA;✅ any non-empty array is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(110,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: content; percent correct: 0; color: orange; test: validation of binary string-encoding; schema: {&quot;contentEncoding&quot;:&quot;base64&quot;}; pass: ; fail: ❌ ignores non-strings&#xA;❌ an invalid base64 string (% is not a valid character); validates true&#xA;❌ a valid base64 string" role="graphics-symbol" aria-roledescription="circle" transform="translate(130,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: content; percent correct: 2; color: orange; test: validation of binary-encoded media type documents; schema: {&quot;contentEncoding&quot;:&quot;base64&quot;,&quot;contentMediaType&quot;:&quot;application/json&quot;}; pass: ; fail: ❌ ignores non-strings&#xA;❌ an invalid base64 string that is valid JSON; validates true&#xA;❌ a validly-encoded invalid JSON document; validates true&#xA;❌ a valid base64-encoded JSON document" role="graphics-symbol" aria-roledescription="circle" transform="translate(130,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: content; percent correct: 4; color: red; test: validation of binary-encoded media type documents with schema; schema: {&quot;contentEncoding&quot;:&quot;base64&quot;,&quot;contentMediaType&quot;:&quot;application/json&quot;,&quot;contentSchema&quot;:{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;foo&quot;]}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(130,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: content; percent correct: 34; color: yellow; test: validation of string-encoded content based on media type; schema: {&quot;contentMediaType&quot;:&quot;application/json&quot;}; pass: ✅ a valid JSON document; fail: ❌ ignores non-strings&#xA;❌ an invalid JSON document; validates true" role="graphics-symbol" aria-roledescription="circle" transform="translate(130,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: default; percent correct: 0; color: red; test: invalid type for default; schema: {&quot;properties&quot;:{&quot;foo&quot;:{&quot;default&quot;:[],&quot;type&quot;:&quot;integer&quot;}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(150,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: default; percent correct: 2; color: red; test: invalid string value for default; schema: {&quot;properties&quot;:{&quot;bar&quot;:{&quot;default&quot;:&quot;bad&quot;,&quot;minLength&quot;:4,&quot;type&quot;:&quot;string&quot;}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(150,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: defs; percent correct: 0; color: red; test: validate definition against metaschema; schema: {&quot;$ref&quot;:&quot;https://json-schema.org/draft/2020-12/schema&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(170,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentRequired; percent correct: 0; color: red; test: single dependency; schema: {&quot;dependentRequired&quot;:{&quot;bar&quot;:[&quot;foo&quot;]}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(190,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentRequired; percent correct: 2; color: red; test: empty dependents; schema: {&quot;dependentRequired&quot;:{&quot;bar&quot;:[]}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(190,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentRequired; percent correct: 4; color: red; test: dependencies with escaped characters; schema: {&quot;dependentRequired&quot;:{&quot;foo\nbar&quot;:[&quot;foo\rbar&quot;],&quot;foo\&quot;bar&quot;:[&quot;foo'bar&quot;]}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(190,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentRequired; percent correct: 50; color: yellow; test: multiple dependents required; schema: {&quot;dependentRequired&quot;:{&quot;quux&quot;:[&quot;foo&quot;,&quot;bar&quot;]}}; pass: ✅ with dependencies&#xA;✅ nondependants&#xA;✅ neither; fail: ❌ missing both dependencies&#xA;❌ missing other dependency&#xA;❌ missing dependency" role="graphics-symbol" aria-roledescription="circle" transform="translate(190,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentSchemas; percent correct: 0; color: red; test: single dependency; schema: {&quot;dependentSchemas&quot;:{&quot;bar&quot;:{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;integer&quot;},&quot;foo&quot;:{&quot;type&quot;:&quot;integer&quot;}}}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(210,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentSchemas; percent correct: 2; color: red; test: dependencies with escaped characters; schema: {&quot;dependentSchemas&quot;:{&quot;foo\tbar&quot;:{&quot;minProperties&quot;:4},&quot;foo'bar&quot;:{&quot;required&quot;:[&quot;foo\&quot;bar&quot;]}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(210,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: dependentSchemas; percent correct: 100; color: green; test: boolean subschemas; schema: {&quot;dependentSchemas&quot;:{&quot;bar&quot;:false,&quot;foo&quot;:true}}; pass: ✅ empty object is valid&#xA;✅ object with both properties is invalid&#xA;✅ object with property having schema false is invalid&#xA;✅ object with property having schema true is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(210,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 66; color: yellow; test: enum with 0 does not match false; schema: {&quot;enum&quot;:[0]}; pass: ✅ integer zero is valid&#xA;✅ false is invalid; fail: ❌ float zero is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(230,68)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 68; color: yellow; test: enum with 1 does not match true; schema: {&quot;enum&quot;:[1]}; pass: ✅ integer one is valid&#xA;✅ true is invalid; fail: ❌ float one is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(230,63.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 100; color: green; test: simple enum validation; schema: {&quot;enum&quot;:[1,2,3]}; pass: ✅ something else is invalid&#xA;✅ one of the enum is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 98; color: green; test: heterogeneous enum validation; schema: {&quot;enum&quot;:[6,&quot;foo&quot;,[],true,{&quot;foo&quot;:12}]}; pass: ✅ extra properties in object is invalid&#xA;✅ valid object matches&#xA;✅ objects are deep compared&#xA;✅ something else is invalid&#xA;✅ one of the enum is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 96; color: green; test: heterogeneous enum-with-null validation; schema: {&quot;enum&quot;:[6,null]}; pass: ✅ something else is invalid&#xA;✅ number is valid&#xA;✅ null is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 94; color: green; test: enums in properties; schema: {&quot;properties&quot;:{&quot;bar&quot;:{&quot;enum&quot;:[&quot;bar&quot;]},&quot;foo&quot;:{&quot;enum&quot;:[&quot;foo&quot;]}},&quot;required&quot;:[&quot;bar&quot;],&quot;type&quot;:&quot;object&quot;}; pass: ✅ missing all properties is invalid&#xA;✅ missing required property is invalid&#xA;✅ missing optional property is valid&#xA;✅ wrong bar value&#xA;✅ wrong foo value&#xA;✅ both properties are valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 92; color: green; test: enum with escaped characters; schema: {&quot;enum&quot;:[&quot;foo\nbar&quot;,&quot;foo\rbar&quot;]}; pass: ✅ another string is invalid&#xA;✅ member 2 is valid&#xA;✅ member 1 is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 90; color: green; test: enum with false does not match 0; schema: {&quot;enum&quot;:[false]}; pass: ✅ float zero is invalid&#xA;✅ integer zero is invalid&#xA;✅ false is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,19.999999999999996)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 88; color: green; test: enum with true does not match 1; schema: {&quot;enum&quot;:[true]}; pass: ✅ float one is invalid&#xA;✅ integer one is invalid&#xA;✅ true is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,24)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: enum; percent correct: 86; color: green; test: nul characters in strings; schema: {&quot;enum&quot;:[&quot;hello\u0000there&quot;]}; pass: ✅ do not match string lacking nul&#xA;✅ match string with nul; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(230,28.000000000000004)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: exclusiveMaximum; percent correct: 76; color: yellow; test: exclusiveMaximum validation; schema: {&quot;exclusiveMaximum&quot;:3.0}; pass: ✅ above the exclusiveMaximum is invalid&#xA;✅ boundary point is invalid&#xA;✅ below the exclusiveMaximum is valid; fail: ❌ ignores non-numbers" role="graphics-symbol" aria-roledescription="circle" transform="translate(250,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: exclusiveMinimum; percent correct: 76; color: yellow; test: exclusiveMinimum validation; schema: {&quot;exclusiveMinimum&quot;:1.1}; pass: ✅ below the exclusiveMinimum is invalid&#xA;✅ boundary point is invalid&#xA;✅ above the exclusiveMinimum is valid; fail: ❌ ignores non-numbers" role="graphics-symbol" aria-roledescription="circle" transform="translate(270,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 0; color: red; test: validation of e-mail addresses; schema: {&quot;format&quot;:&quot;email&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 2; color: red; test: validation of IDN e-mail addresses; schema: {&quot;format&quot;:&quot;idn-email&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 4; color: orange; test: validation of regexes; schema: {&quot;format&quot;:&quot;regex&quot;}; pass: ; fail: ❌ invalid regex string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 6; color: orange; test: validation of IP addresses; schema: {&quot;format&quot;:&quot;ipv4&quot;}; pass: ; fail: ❌ invalid ipv4 string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 8; color: orange; test: validation of IPv6 addresses; schema: {&quot;format&quot;:&quot;ipv6&quot;}; pass: ; fail: ❌ invalid ipv6 string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,184)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 10; color: orange; test: validation of IDN hostnames; schema: {&quot;format&quot;:&quot;idn-hostname&quot;}; pass: ; fail: ❌ invalid idn-hostname string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,180)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 12; color: orange; test: validation of hostnames; schema: {&quot;format&quot;:&quot;hostname&quot;}; pass: ; fail: ❌ invalid hostname string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,176)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 14; color: orange; test: validation of date strings; schema: {&quot;format&quot;:&quot;date&quot;}; pass: ; fail: ❌ invalid date string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,172)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 16; color: orange; test: validation of date-time strings; schema: {&quot;format&quot;:&quot;date-time&quot;}; pass: ; fail: ❌ invalid date-time string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,168)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 18; color: orange; test: validation of time strings; schema: {&quot;format&quot;:&quot;time&quot;}; pass: ; fail: ❌ invalid time string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,164)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 20; color: red; test: validation of JSON pointers; schema: {&quot;format&quot;:&quot;json-pointer&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,160)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 22; color: red; test: validation of relative JSON pointers; schema: {&quot;format&quot;:&quot;relative-json-pointer&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,156)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 24; color: red; test: validation of URIs; schema: {&quot;format&quot;:&quot;uri&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(290,152)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 26; color: orange; test: validation of URI templates; schema: {&quot;format&quot;:&quot;uri-template&quot;}; pass: ; fail: ❌ invalid uri-template string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,148)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 28; color: orange; test: validation of UUIDs; schema: {&quot;format&quot;:&quot;uuid&quot;}; pass: ; fail: ❌ invalid uuid string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,144)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 30; color: orange; test: validation of durations; schema: {&quot;format&quot;:&quot;duration&quot;}; pass: ; fail: ❌ invalid duration string is only an annotation by default&#xA;❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,140)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 32; color: yellow; test: validation of IRIs; schema: {&quot;format&quot;:&quot;iri&quot;}; pass: ✅ invalid iri string is only an annotation by default; fail: ❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,136)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 34; color: yellow; test: validation of IRI references; schema: {&quot;format&quot;:&quot;iri-reference&quot;}; pass: ✅ invalid iri-reference string is only an annotation by default; fail: ❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: format; percent correct: 36; color: yellow; test: validation of URI references; schema: {&quot;format&quot;:&quot;uri-reference&quot;}; pass: ✅ invalid uri-reference string is only an annotation by default; fail: ❌ ignores null&#xA;❌ ignores booleans&#xA;❌ ignores arrays&#xA;❌ ignores objects&#xA;❌ ignores floats&#xA;❌ ignores integers" role="graphics-symbol" aria-roledescription="circle" transform="translate(290,128)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: id; percent correct: 0; color: red; test: Invalid use of fragments in location-independent $id; schema: {&quot;$ref&quot;:&quot;https://json-schema.org/draft/2020-12/schema&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(310,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: id; percent correct: 2; color: red; test: Valid use of empty fragments in location-independent $id; schema: {&quot;$ref&quot;:&quot;https://json-schema.org/draft/2020-12/schema&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(310,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: id; percent correct: 4; color: red; test: Unnormalized $ids are allowed but discouraged; schema: {&quot;$ref&quot;:&quot;https://json-schema.org/draft/2020-12/schema&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(310,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 0; color: red; test: ignore if without then or else; schema: {&quot;if&quot;:{&quot;const&quot;:0}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(330,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 2; color: red; test: ignore then without if; schema: {&quot;then&quot;:{&quot;const&quot;:0}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(330,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 4; color: red; test: ignore else without if; schema: {&quot;else&quot;:{&quot;const&quot;:0}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(330,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 6; color: orange; test: non-interference across combined schemas; schema: {&quot;allOf&quot;:[{&quot;if&quot;:{&quot;exclusiveMaximum&quot;:0}},{&quot;then&quot;:{&quot;minimum&quot;:-10}},{&quot;else&quot;:{&quot;multipleOf&quot;:2}}]}; pass: ; fail: ❌ valid, but would have been invalid through else&#xA;❌ valid, but would have been invalid through then" role="graphics-symbol" aria-roledescription="circle" transform="translate(330,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 50; color: yellow; test: validate against correct branch, then vs else; schema: {&quot;else&quot;:{&quot;multipleOf&quot;:2},&quot;if&quot;:{&quot;exclusiveMaximum&quot;:0},&quot;then&quot;:{&quot;minimum&quot;:-10}}; pass: ✅ invalid through else&#xA;✅ valid through else; fail: ❌ invalid through then&#xA;❌ valid through then" role="graphics-symbol" aria-roledescription="circle" transform="translate(330,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 100; color: green; test: if and then without else; schema: {&quot;if&quot;:{&quot;exclusiveMaximum&quot;:0},&quot;then&quot;:{&quot;minimum&quot;:-10}}; pass: ✅ valid when if test fails&#xA;✅ invalid through then&#xA;✅ valid through then; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(330,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 98; color: green; test: if and else without then; schema: {&quot;else&quot;:{&quot;multipleOf&quot;:2},&quot;if&quot;:{&quot;exclusiveMaximum&quot;:0}}; pass: ✅ invalid through else&#xA;✅ valid through else&#xA;✅ valid when if test passes; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(330,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 96; color: green; test: if with boolean schema true; schema: {&quot;else&quot;:{&quot;const&quot;:&quot;else&quot;},&quot;if&quot;:true,&quot;then&quot;:{&quot;const&quot;:&quot;then&quot;}}; pass: ✅ boolean schema true in if always chooses the then path (invalid)&#xA;✅ boolean schema true in if always chooses the then path (valid); fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(330,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 94; color: green; test: if with boolean schema false; schema: {&quot;else&quot;:{&quot;const&quot;:&quot;else&quot;},&quot;if&quot;:false,&quot;then&quot;:{&quot;const&quot;:&quot;then&quot;}}; pass: ✅ boolean schema false in if always chooses the else path (valid)&#xA;✅ boolean schema false in if always chooses the else path (invalid); fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(330,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: if-then-else; percent correct: 92; color: green; test: if appears at the end when serialized (keyword processing sequence); schema: {&quot;else&quot;:{&quot;const&quot;:&quot;other&quot;},&quot;if&quot;:{&quot;maxLength&quot;:4},&quot;then&quot;:{&quot;const&quot;:&quot;yes&quot;}}; pass: ✅ invalid redirects to else and fails&#xA;✅ no redirects to then and fails&#xA;✅ other redirects to else and passes&#xA;✅ yes redirects to then and passes; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(330,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: infinite-loop-detection; percent correct: 100; color: green; test: evaluating the same schema location against the same data location twice is not a sign of an infinite loop; schema: {&quot;$defs&quot;:{&quot;int&quot;:{&quot;type&quot;:&quot;integer&quot;}},&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:{&quot;$ref&quot;:&quot;#/$defs/int&quot;}}},{&quot;additionalProperties&quot;:{&quot;$ref&quot;:&quot;#/$defs/int&quot;}}]}; pass: ✅ failing case&#xA;✅ passing case; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(350,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 50; color: yellow; test: a schema given for items; schema: {&quot;items&quot;:{&quot;type&quot;:&quot;integer&quot;}}; pass: ✅ wrong type of items&#xA;✅ valid items; fail: ❌ JavaScript pseudo-array is valid&#xA;❌ ignores non-arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(370,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 84; color: yellow; test: items and subitems; schema: {&quot;$defs&quot;:{&quot;item&quot;:{&quot;items&quot;:false,&quot;prefixItems&quot;:[{&quot;$ref&quot;:&quot;#/$defs/sub-item&quot;},{&quot;$ref&quot;:&quot;#/$defs/sub-item&quot;}],&quot;type&quot;:&quot;array&quot;},&quot;sub-item&quot;:{&quot;required&quot;:[&quot;foo&quot;],&quot;type&quot;:&quot;object&quot;}},&quot;items&quot;:false,&quot;prefixItems&quot;:[{&quot;$ref&quot;:&quot;#/$defs/item&quot;},{&quot;$ref&quot;:&quot;#/$defs/item&quot;},{&quot;$ref&quot;:&quot;#/$defs/item&quot;}],&quot;type&quot;:&quot;array&quot;}; pass: ✅ wrong sub-item&#xA;✅ wrong item&#xA;✅ too many sub-items&#xA;✅ too many items&#xA;✅ valid items; fail: ❌ fewer items is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(370,32.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 100; color: green; test: items with boolean schema (true); schema: {&quot;items&quot;:true}; pass: ✅ empty array is valid&#xA;✅ any array is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(370,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 98; color: green; test: items with boolean schema (false); schema: {&quot;items&quot;:false}; pass: ✅ empty array is valid&#xA;✅ any non-empty array is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(370,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 96; color: green; test: nested items; schema: {&quot;items&quot;:{&quot;items&quot;:{&quot;items&quot;:{&quot;items&quot;:{&quot;type&quot;:&quot;number&quot;},&quot;type&quot;:&quot;array&quot;},&quot;type&quot;:&quot;array&quot;},&quot;type&quot;:&quot;array&quot;},&quot;type&quot;:&quot;array&quot;}; pass: ✅ not deep enough&#xA;✅ nested array with invalid type&#xA;✅ valid nested array; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(370,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 94; color: green; test: prefixItems with no additional items allowed; schema: {&quot;items&quot;:false,&quot;prefixItems&quot;:[{},{},{}]}; pass: ✅ additional items are not permitted&#xA;✅ equal number of items present&#xA;✅ fewer number of items present (2)&#xA;✅ fewer number of items present (1)&#xA;✅ empty array; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(370,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: items; percent correct: 92; color: green; test: items should not look in applicators, valid case; schema: {&quot;allOf&quot;:[{&quot;prefixItems&quot;:[{&quot;minimum&quot;:3}]}],&quot;items&quot;:{&quot;minimum&quot;:5}}; pass: ✅ prefixItems in allOf should not constrain items, valid case&#xA;✅ prefixItems in allOf should not constrain items, invalid case; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(370,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: maxContains; percent correct: 80; color: yellow; test: maxContains with contains; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;maxContains&quot;:1}; pass: ✅ some elements match, invalid maxContains&#xA;✅ some elements match, valid maxContains&#xA;✅ all elements match, invalid maxContains&#xA;✅ all elements match, valid maxContains; fail: ❌ empty data" role="graphics-symbol" aria-roledescription="circle" transform="translate(390,39.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: maxContains; percent correct: 100; color: green; test: maxContains without contains is ignored; schema: {&quot;maxContains&quot;:1}; pass: ✅ two items still valid against lone maxContains&#xA;✅ one item valid against lone maxContains; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(390,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: maxContains; percent correct: 98; color: green; test: minContains &lt; maxContains; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;maxContains&quot;:3,&quot;minContains&quot;:1}; pass: ✅ minContains &lt; maxContains &lt; actual&#xA;✅ minContains &lt; actual &lt; maxContains&#xA;✅ actual &lt; minContains &lt; maxContains; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(390,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: maxItems; percent correct: 76; color: yellow; test: maxItems validation; schema: {&quot;maxItems&quot;:2}; pass: ✅ too long is invalid&#xA;✅ exact length is valid&#xA;✅ shorter is valid; fail: ❌ ignores non-arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(410,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: maxLength; percent correct: 60; color: yellow; test: maxLength validation; schema: {&quot;maxLength&quot;:2}; pass: ✅ too long is invalid&#xA;✅ exact length is valid&#xA;✅ shorter is valid; fail: ❌ two supplementary Unicode code points is long enough&#xA;❌ ignores non-strings" role="graphics-symbol" aria-roledescription="circle" transform="translate(430,80)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: maxProperties; percent correct: 50; color: yellow; test: maxProperties validation; schema: {&quot;maxProperties&quot;:2}; pass: ✅ too long is invalid&#xA;✅ exact length is valid&#xA;✅ shorter is valid; fail: ❌ ignores other non-objects&#xA;❌ ignores strings&#xA;❌ ignores arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(450,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: maxProperties; percent correct: 100; color: green; test: maxProperties = 0 means the object is empty; schema: {&quot;maxProperties&quot;:0}; pass: ✅ one property is invalid&#xA;✅ no properties is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(450,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: maximum; percent correct: 76; color: yellow; test: maximum validation; schema: {&quot;maximum&quot;:3.0}; pass: ✅ above the maximum is invalid&#xA;✅ boundary point is valid&#xA;✅ below the maximum is valid; fail: ❌ ignores non-numbers" role="graphics-symbol" aria-roledescription="circle" transform="translate(470,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: maximum; percent correct: 100; color: green; test: maximum validation with unsigned integer; schema: {&quot;maximum&quot;:300}; pass: ✅ above the maximum is invalid&#xA;✅ boundary point float is valid&#xA;✅ boundary point integer is valid&#xA;✅ below the maximum is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(470,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: minContains; percent correct: 100; color: green; test: minContains without contains is ignored; schema: {&quot;minContains&quot;:1}; pass: ✅ zero items still valid against lone minContains&#xA;✅ one item valid against lone minContains; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(490,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: minContains; percent correct: 98; color: green; test: minContains=1 with contains; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;minContains&quot;:1}; pass: ✅ all elements match, valid minContains&#xA;✅ some elements match, valid minContains&#xA;✅ single element matches, valid minContains&#xA;✅ no elements match&#xA;✅ empty data; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(490,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: minContains; percent correct: 96; color: green; test: minContains=2 with contains; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;minContains&quot;:2}; pass: ✅ some elements match, valid minContains&#xA;✅ all elements match, valid minContains (more than needed)&#xA;✅ all elements match, valid minContains (exactly as needed)&#xA;✅ some elements match, invalid minContains&#xA;✅ all elements match, invalid minContains&#xA;✅ empty data; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(490,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: minContains; percent correct: 94; color: green; test: maxContains = minContains; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;maxContains&quot;:2,&quot;minContains&quot;:2}; pass: ✅ all elements match, valid maxContains and minContains&#xA;✅ all elements match, invalid maxContains&#xA;✅ all elements match, invalid minContains&#xA;✅ empty data; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(490,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: minContains; percent correct: 92; color: green; test: maxContains &lt; minContains; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;maxContains&quot;:1,&quot;minContains&quot;:3}; pass: ✅ invalid maxContains and minContains&#xA;✅ invalid maxContains&#xA;✅ invalid minContains&#xA;✅ empty data; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(490,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: minContains; percent correct: 90; color: green; test: minContains = 0; schema: {&quot;contains&quot;:{&quot;const&quot;:1},&quot;minContains&quot;:0}; pass: ✅ minContains = 0 makes contains always pass&#xA;✅ empty data; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(490,19.999999999999996)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: minItems; percent correct: 76; color: yellow; test: minItems validation; schema: {&quot;minItems&quot;:1}; pass: ✅ too short is invalid&#xA;✅ exact length is valid&#xA;✅ longer is valid; fail: ❌ ignores non-arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(510,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: minLength; percent correct: 60; color: yellow; test: minLength validation; schema: {&quot;minLength&quot;:2}; pass: ✅ too short is invalid&#xA;✅ exact length is valid&#xA;✅ longer is valid; fail: ❌ one supplementary Unicode code point is not long enough&#xA;❌ ignores non-strings" role="graphics-symbol" aria-roledescription="circle" transform="translate(530,80)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: minProperties; percent correct: 50; color: yellow; test: minProperties validation; schema: {&quot;minProperties&quot;:1}; pass: ✅ too short is invalid&#xA;✅ exact length is valid&#xA;✅ longer is valid; fail: ❌ ignores other non-objects&#xA;❌ ignores strings&#xA;❌ ignores arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(550,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: minimum; percent correct: 76; color: yellow; test: minimum validation; schema: {&quot;minimum&quot;:1.1}; pass: ✅ below the minimum is invalid&#xA;✅ boundary point is valid&#xA;✅ above the minimum is valid; fail: ❌ ignores non-numbers" role="graphics-symbol" aria-roledescription="circle" transform="translate(570,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: minimum; percent correct: 86; color: yellow; test: minimum validation with signed integer; schema: {&quot;minimum&quot;:-2}; pass: ✅ int below the minimum is invalid&#xA;✅ float below the minimum is invalid&#xA;✅ boundary point with float is valid&#xA;✅ boundary point is valid&#xA;✅ positive above the minimum is valid&#xA;✅ negative above the minimum is valid; fail: ❌ ignores non-numbers" role="graphics-symbol" aria-roledescription="circle" transform="translate(570,28.000000000000004)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: multipleOf; percent correct: 0; color: red; test: invalid instance should not raise error when float division = inf; schema: {&quot;multipleOf&quot;:0.123456789,&quot;type&quot;:&quot;integer&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(590,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: multipleOf; percent correct: 50; color: yellow; test: by small number; schema: {&quot;multipleOf&quot;:0.0001}; pass: ✅ 0.00751 is not multiple of 0.0001; fail: ❌ 0.0075 is multiple of 0.0001" role="graphics-symbol" aria-roledescription="circle" transform="translate(590,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: multipleOf; percent correct: 66; color: yellow; test: by int; schema: {&quot;multipleOf&quot;:2}; pass: ✅ int by int fail&#xA;✅ int by int; fail: ❌ ignores non-numbers" role="graphics-symbol" aria-roledescription="circle" transform="translate(590,68)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: multipleOf; percent correct: 68; color: yellow; test: by number; schema: {&quot;multipleOf&quot;:1.5}; pass: ✅ 35 is not multiple of 1.5&#xA;✅ zero is multiple of anything; fail: ❌ 4.5 is multiple of 1.5" role="graphics-symbol" aria-roledescription="circle" transform="translate(590,63.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: not; percent correct: 0; color: red; test: not more complex schema; schema: {&quot;not&quot;:{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(610,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: not; percent correct: 2; color: red; test: forbidden property; schema: {&quot;properties&quot;:{&quot;foo&quot;:{&quot;not&quot;:{}}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(610,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: not; percent correct: 100; color: green; test: not; schema: {&quot;not&quot;:{&quot;type&quot;:&quot;integer&quot;}}; pass: ✅ disallowed&#xA;✅ allowed; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(610,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: not; percent correct: 98; color: green; test: not multiple types; schema: {&quot;not&quot;:{&quot;type&quot;:[&quot;integer&quot;,&quot;boolean&quot;]}}; pass: ✅ other mismatch&#xA;✅ mismatch&#xA;✅ valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(610,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: not; percent correct: 96; color: green; test: not with boolean schema true; schema: {&quot;not&quot;:true}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(610,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: not; percent correct: 94; color: green; test: not with boolean schema false; schema: {&quot;not&quot;:false}; pass: ✅ any value is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(610,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 0; color: orange; test: oneOf with base schema; schema: {&quot;oneOf&quot;:[{&quot;minLength&quot;:2},{&quot;maxLength&quot;:4}],&quot;type&quot;:&quot;string&quot;}; pass: ; fail: ❌ both oneOf valid&#xA;❌ one oneOf valid&#xA;❌ mismatch base schema" role="graphics-symbol" aria-roledescription="circle" transform="translate(630,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 2; color: orange; test: oneOf with boolean schemas, one true; schema: {&quot;oneOf&quot;:[true,false,false]}; pass: ; fail: ❌ any value is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(630,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 50; color: yellow; test: oneOf with empty schema; schema: {&quot;oneOf&quot;:[{&quot;type&quot;:&quot;number&quot;},{}]}; pass: ✅ one valid - valid; fail: ❌ both valid - invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(630,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 52; color: yellow; test: nested oneOf, to check validation semantics; schema: {&quot;oneOf&quot;:[{&quot;oneOf&quot;:[{&quot;type&quot;:&quot;null&quot;}]}]}; pass: ✅ null is valid; fail: ❌ anything non-null is invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(630,96)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 76; color: yellow; test: oneOf; schema: {&quot;oneOf&quot;:[{&quot;type&quot;:&quot;integer&quot;},{&quot;minimum&quot;:2}]}; pass: ✅ neither oneOf valid&#xA;✅ second oneOf valid&#xA;✅ first oneOf valid; fail: ❌ both oneOf valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(630,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 78; color: yellow; test: oneOf with required; schema: {&quot;oneOf&quot;:[{&quot;required&quot;:[&quot;foo&quot;,&quot;bar&quot;]},{&quot;required&quot;:[&quot;foo&quot;,&quot;baz&quot;]}],&quot;type&quot;:&quot;object&quot;}; pass: ✅ second valid - valid&#xA;✅ first valid - valid&#xA;✅ both invalid - invalid; fail: ❌ both valid - invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(630,43.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 80; color: yellow; test: oneOf with missing optional property; schema: {&quot;oneOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:true,&quot;baz&quot;:true},&quot;required&quot;:[&quot;bar&quot;]},{&quot;properties&quot;:{&quot;foo&quot;:true},&quot;required&quot;:[&quot;foo&quot;]}]}; pass: ✅ neither oneOf valid&#xA;✅ both oneOf valid&#xA;✅ second oneOf valid; fail: ❌ first oneOf valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(630,39.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 100; color: green; test: oneOf with boolean schemas, all true; schema: {&quot;oneOf&quot;:[true,true,true]}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(630,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 98; color: green; test: oneOf with boolean schemas, more than one true; schema: {&quot;oneOf&quot;:[true,true,false]}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(630,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 96; color: green; test: oneOf with boolean schemas, all false; schema: {&quot;oneOf&quot;:[false,false,false]}; pass: ✅ any value is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(630,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: oneOf; percent correct: 94; color: green; test: oneOf complex types; schema: {&quot;oneOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;integer&quot;}},&quot;required&quot;:[&quot;bar&quot;]},{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;foo&quot;]}]}; pass: ✅ neither oneOf valid (complex)&#xA;✅ both oneOf valid (complex)&#xA;✅ second oneOf valid (complex)&#xA;✅ first oneOf valid (complex); fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(630,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: pattern; percent correct: 0; color: red; test: pattern validation; schema: {&quot;pattern&quot;:&quot;^a*$&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(650,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: pattern; percent correct: 2; color: red; test: pattern is not anchored; schema: {&quot;pattern&quot;:&quot;a+&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(650,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: patternProperties; percent correct: 0; color: red; test: multiple simultaneous patternProperties are validated; schema: {&quot;patternProperties&quot;:{&quot;a*&quot;:{&quot;type&quot;:&quot;integer&quot;},&quot;aaa*&quot;:{&quot;maximum&quot;:20}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(670,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: patternProperties; percent correct: 40; color: yellow; test: patternProperties with boolean schemas; schema: {&quot;patternProperties&quot;:{&quot;b.*&quot;:false,&quot;f.*&quot;:true}}; pass: ✅ empty object is valid&#xA;✅ object with property matching schema true is valid; fail: ❌ object with a property matching both true and false is invalid&#xA;❌ object with both properties is invalid&#xA;❌ object with property matching schema false is invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(670,120)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: patternProperties; percent correct: 50; color: yellow; test: regexes are not anchored by default and are case sensitive; schema: {&quot;patternProperties&quot;:{&quot;X_&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;[0-9]{2,}&quot;:{&quot;type&quot;:&quot;boolean&quot;}}}; pass: ✅ regexes are case sensitive&#xA;✅ non recognized members are ignored; fail: ❌ regexes are case sensitive, 2&#xA;❌ recognized members are accounted for" role="graphics-symbol" aria-roledescription="circle" transform="translate(670,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: patternProperties; percent correct: 58; color: yellow; test: patternProperties validates properties matching a regex; schema: {&quot;patternProperties&quot;:{&quot;f.*o&quot;:{&quot;type&quot;:&quot;integer&quot;}}}; pass: ✅ multiple invalid matches is invalid&#xA;✅ a single invalid match is invalid&#xA;✅ multiple valid matches is valid&#xA;✅ a single valid match is valid; fail: ❌ ignores other non-objects&#xA;❌ ignores strings&#xA;❌ ignores arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(670,84.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: prefixItems; percent correct: 34; color: yellow; test: prefixItems with boolean schemas; schema: {&quot;prefixItems&quot;:[true,false]}; pass: ✅ array with two items is invalid; fail: ❌ empty array is valid&#xA;❌ array with one item is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(690,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: prefixItems; percent correct: 50; color: yellow; test: a schema given for prefixItems; schema: {&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;integer&quot;},{&quot;type&quot;:&quot;string&quot;}]}; pass: ✅ array with additional items&#xA;✅ wrong types&#xA;✅ correct types; fail: ❌ JavaScript pseudo-array is valid&#xA;❌ empty array&#xA;❌ incomplete array of items" role="graphics-symbol" aria-roledescription="circle" transform="translate(690,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: prefixItems; percent correct: 100; color: green; test: additional items are allowed by default; schema: {&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;integer&quot;}]}; pass: ✅ only the first item is validated; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(690,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: properties; percent correct: 34; color: yellow; test: object properties validation; schema: {&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;foo&quot;:{&quot;type&quot;:&quot;integer&quot;}}}; pass: ✅ doesn't invalidate other properties&#xA;✅ both properties present and valid is valid; fail: ❌ ignores other non-objects&#xA;❌ ignores arrays&#xA;❌ both properties invalid is invalid&#xA;❌ one property invalid is invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(710,131.99999999999997)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: properties; percent correct: 76; color: yellow; test: properties with boolean schema; schema: {&quot;properties&quot;:{&quot;bar&quot;:false,&quot;foo&quot;:true}}; pass: ✅ both properties present is invalid&#xA;✅ only 'false' property present is invalid&#xA;✅ no property present is valid; fail: ❌ only 'true' property present is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(710,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: properties; percent correct: 100; color: green; test: properties, patternProperties, additionalProperties interaction; schema: {&quot;additionalProperties&quot;:{&quot;type&quot;:&quot;integer&quot;},&quot;patternProperties&quot;:{&quot;f.o&quot;:{&quot;minItems&quot;:2}},&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;array&quot;},&quot;foo&quot;:{&quot;maxItems&quot;:3,&quot;type&quot;:&quot;array&quot;}}}; pass: ✅ additionalProperty invalidates others&#xA;✅ additionalProperty validates others&#xA;✅ additionalProperty ignores property&#xA;✅ patternProperty invalidates nonproperty&#xA;✅ patternProperty validates nonproperty&#xA;✅ patternProperty invalidates property&#xA;✅ property invalidates property&#xA;✅ property validates property; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(710,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: properties; percent correct: 98; color: green; test: properties with escaped characters; schema: {&quot;properties&quot;:{&quot;foo\tbar&quot;:{&quot;type&quot;:&quot;number&quot;},&quot;foo\nbar&quot;:{&quot;type&quot;:&quot;number&quot;},&quot;foo\fbar&quot;:{&quot;type&quot;:&quot;number&quot;},&quot;foo\rbar&quot;:{&quot;type&quot;:&quot;number&quot;},&quot;foo\&quot;bar&quot;:{&quot;type&quot;:&quot;number&quot;},&quot;foo\\bar&quot;:{&quot;type&quot;:&quot;number&quot;}}}; pass: ✅ object with strings is invalid&#xA;✅ object with all numbers is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(710,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: propertyNames; percent correct: 50; color: yellow; test: propertyNames validation; schema: {&quot;propertyNames&quot;:{&quot;maxLength&quot;:3}}; pass: ✅ object without properties is valid&#xA;✅ some property names invalid&#xA;✅ all property names valid; fail: ❌ ignores other non-objects&#xA;❌ ignores strings&#xA;❌ ignores arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(730,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: propertyNames; percent correct: 100; color: green; test: propertyNames with boolean schema true; schema: {&quot;propertyNames&quot;:true}; pass: ✅ empty object is valid&#xA;✅ object with any properties is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(730,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: propertyNames; percent correct: 98; color: green; test: propertyNames with boolean schema false; schema: {&quot;propertyNames&quot;:false}; pass: ✅ empty object is valid&#xA;✅ object with any properties is invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(730,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 0; color: red; test: remote ref, containing refs itself; schema: {&quot;$ref&quot;:&quot;https://json-schema.org/draft/2020-12/schema&quot;}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 2; color: orange; test: $ref to boolean schema true; schema: {&quot;$defs&quot;:{&quot;bool&quot;:true},&quot;$ref&quot;:&quot;#/$defs/bool&quot;}; pass: ; fail: ❌ any value is valid" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 4; color: orange; test: $ref to boolean schema false; schema: {&quot;$defs&quot;:{&quot;bool&quot;:false},&quot;$ref&quot;:&quot;#/$defs/bool&quot;}; pass: ; fail: ❌ any value is invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 6; color: red; test: refs with quote; schema: {&quot;$defs&quot;:{&quot;foo\&quot;bar&quot;:{&quot;type&quot;:&quot;number&quot;}},&quot;properties&quot;:{&quot;foo\&quot;bar&quot;:{&quot;$ref&quot;:&quot;#/$defs/foo%22bar&quot;}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 8; color: red; test: ref creates new scope when adjacent to keywords; schema: {&quot;$defs&quot;:{&quot;A&quot;:{&quot;unevaluatedProperties&quot;:false}},&quot;$ref&quot;:&quot;#/$defs/A&quot;,&quot;properties&quot;:{&quot;prop1&quot;:{&quot;type&quot;:&quot;string&quot;}}}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,184)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 10; color: orange; test: naive replacement of $ref with its destination is not correct; schema: {&quot;$defs&quot;:{&quot;a_string&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;enum&quot;:[{&quot;$ref&quot;:&quot;#/$defs/a_string&quot;}]}; pass: ; fail: ❌ match the enum exactly&#xA;❌ do not evaluate the $ref inside the enum" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,180)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 50; color: yellow; test: root pointer ref; schema: {&quot;additionalProperties&quot;:false,&quot;properties&quot;:{&quot;foo&quot;:{&quot;$ref&quot;:&quot;#&quot;}}}; pass: ✅ recursive mismatch&#xA;✅ mismatch; fail: ❌ recursive match&#xA;❌ match" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 52; color: yellow; test: property named $ref that is not a reference; schema: {&quot;properties&quot;:{&quot;$ref&quot;:{&quot;type&quot;:&quot;string&quot;}}}; pass: ✅ property named $ref valid; fail: ❌ property named $ref invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,96)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 54; color: yellow; test: property named $ref, containing an actual $ref; schema: {&quot;$defs&quot;:{&quot;is-string&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;properties&quot;:{&quot;$ref&quot;:{&quot;$ref&quot;:&quot;#/$defs/is-string&quot;}}}; pass: ✅ property named $ref valid; fail: ❌ property named $ref invalid" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,92)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 56; color: yellow; test: Recursive references between schemas; schema: {&quot;$defs&quot;:{&quot;node&quot;:{&quot;$id&quot;:&quot;http://localhost:1234/node&quot;,&quot;description&quot;:&quot;node&quot;,&quot;properties&quot;:{&quot;subtree&quot;:{&quot;$ref&quot;:&quot;tree&quot;},&quot;value&quot;:{&quot;type&quot;:&quot;number&quot;}},&quot;required&quot;:[&quot;value&quot;],&quot;type&quot;:&quot;object&quot;}},&quot;$id&quot;:&quot;http://localhost:1234/tree&quot;,&quot;description&quot;:&quot;tree of nodes&quot;,&quot;properties&quot;:{&quot;meta&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;nodes&quot;:{&quot;items&quot;:{&quot;$ref&quot;:&quot;node&quot;},&quot;type&quot;:&quot;array&quot;}},&quot;required&quot;:[&quot;meta&quot;,&quot;nodes&quot;],&quot;type&quot;:&quot;object&quot;}; pass: ✅ valid tree; fail: ❌ invalid tree" role="graphics-symbol" aria-roledescription="circle" transform="translate(750,87.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 100; color: green; test: relative pointer ref to object; schema: {&quot;properties&quot;:{&quot;bar&quot;:{&quot;$ref&quot;:&quot;#/properties/foo&quot;},&quot;foo&quot;:{&quot;type&quot;:&quot;integer&quot;}}}; pass: ✅ mismatch&#xA;✅ match; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 98; color: green; test: relative pointer ref to array; schema: {&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;integer&quot;},{&quot;$ref&quot;:&quot;#/prefixItems/0&quot;}]}; pass: ✅ mismatch array&#xA;✅ match array; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 96; color: green; test: escaped pointer ref; schema: {&quot;$defs&quot;:{&quot;percent%field&quot;:{&quot;type&quot;:&quot;integer&quot;},&quot;slash/field&quot;:{&quot;type&quot;:&quot;integer&quot;},&quot;tilde~field&quot;:{&quot;type&quot;:&quot;integer&quot;}},&quot;properties&quot;:{&quot;percent&quot;:{&quot;$ref&quot;:&quot;#/$defs/percent%25field&quot;},&quot;slash&quot;:{&quot;$ref&quot;:&quot;#/$defs/slash~1field&quot;},&quot;tilde&quot;:{&quot;$ref&quot;:&quot;#/$defs/tilde~0field&quot;}}}; pass: ✅ percent valid&#xA;✅ tilde valid&#xA;✅ slash valid&#xA;✅ percent invalid&#xA;✅ tilde invalid&#xA;✅ slash invalid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 94; color: green; test: nested refs; schema: {&quot;$defs&quot;:{&quot;a&quot;:{&quot;type&quot;:&quot;integer&quot;},&quot;b&quot;:{&quot;$ref&quot;:&quot;#/$defs/a&quot;},&quot;c&quot;:{&quot;$ref&quot;:&quot;#/$defs/b&quot;}},&quot;$ref&quot;:&quot;#/$defs/c&quot;}; pass: ✅ nested ref invalid&#xA;✅ nested ref valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: ref; percent correct: 92; color: green; test: ref applies alongside sibling keywords; schema: {&quot;$defs&quot;:{&quot;reffed&quot;:{&quot;type&quot;:&quot;array&quot;}},&quot;properties&quot;:{&quot;foo&quot;:{&quot;$ref&quot;:&quot;#/$defs/reffed&quot;,&quot;maxItems&quot;:2}}}; pass: ✅ ref invalid&#xA;✅ ref valid, maxItems invalid&#xA;✅ ref valid, maxItems valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(750,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: required; percent correct: 0; color: red; test: required with escaped characters; schema: {&quot;required&quot;:[&quot;foo\nbar&quot;,&quot;foo\&quot;bar&quot;,&quot;foo\\bar&quot;,&quot;foo\rbar&quot;,&quot;foo\tbar&quot;,&quot;foo\fbar&quot;]}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(770,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: required; percent correct: 40; color: yellow; test: required validation; schema: {&quot;properties&quot;:{&quot;bar&quot;:{},&quot;foo&quot;:{}},&quot;required&quot;:[&quot;foo&quot;]}; pass: ✅ non-present required property is invalid&#xA;✅ present required property is valid; fail: ❌ ignores other non-objects&#xA;❌ ignores strings&#xA;❌ ignores arrays" role="graphics-symbol" aria-roledescription="circle" transform="translate(770,120)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: required; percent correct: 100; color: green; test: required default validation; schema: {&quot;properties&quot;:{&quot;foo&quot;:{}}}; pass: ✅ not required by default; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(770,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: required; percent correct: 98; color: green; test: required with empty array; schema: {&quot;properties&quot;:{&quot;foo&quot;:{}},&quot;required&quot;:[]}; pass: ✅ property not required; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(770,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 88; color: yellow; test: integer type matches integers; schema: {&quot;type&quot;:&quot;integer&quot;}; pass: ✅ null is not an integer&#xA;✅ a boolean is not an integer&#xA;✅ an array is not an integer&#xA;✅ an object is not an integer&#xA;✅ a string is still not an integer, even if it looks like one&#xA;✅ a string is not an integer&#xA;✅ a float is not an integer&#xA;✅ an integer is an integer; fail: ❌ a float with zero fractional part is an integer" role="graphics-symbol" aria-roledescription="circle" transform="translate(790,24)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 100; color: green; test: number type matches numbers; schema: {&quot;type&quot;:&quot;number&quot;}; pass: ✅ null is not a number&#xA;✅ a boolean is not a number&#xA;✅ an array is not a number&#xA;✅ an object is not a number&#xA;✅ a string is still not a number, even if it looks like one&#xA;✅ a string is not a number&#xA;✅ a float is a number&#xA;✅ a float with zero fractional part is a number (and an integer)&#xA;✅ an integer is a number; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 98; color: green; test: string type matches strings; schema: {&quot;type&quot;:&quot;string&quot;}; pass: ✅ null is not a string&#xA;✅ a boolean is not a string&#xA;✅ an array is not a string&#xA;✅ an object is not a string&#xA;✅ an empty string is still a string&#xA;✅ a string is still a string, even if it looks like a number&#xA;✅ a string is a string&#xA;✅ a float is not a string&#xA;✅ 1 is not a string; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 96; color: green; test: object type matches objects; schema: {&quot;type&quot;:&quot;object&quot;}; pass: ✅ null is not an object&#xA;✅ a boolean is not an object&#xA;✅ an array is not an object&#xA;✅ an object is an object&#xA;✅ a string is not an object&#xA;✅ a float is not an object&#xA;✅ an integer is not an object; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 94; color: green; test: array type matches arrays; schema: {&quot;type&quot;:&quot;array&quot;}; pass: ✅ null is not an array&#xA;✅ a boolean is not an array&#xA;✅ an array is an array&#xA;✅ an object is not an array&#xA;✅ a string is not an array&#xA;✅ a float is not an array&#xA;✅ an integer is not an array; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 92; color: green; test: boolean type matches booleans; schema: {&quot;type&quot;:&quot;boolean&quot;}; pass: ✅ null is not a boolean&#xA;✅ false is a boolean&#xA;✅ true is a boolean&#xA;✅ an array is not a boolean&#xA;✅ an object is not a boolean&#xA;✅ an empty string is not a boolean&#xA;✅ a string is not a boolean&#xA;✅ a float is not a boolean&#xA;✅ zero is not a boolean&#xA;✅ an integer is not a boolean; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 90; color: green; test: null type matches only the null object; schema: {&quot;type&quot;:&quot;null&quot;}; pass: ✅ null is null&#xA;✅ false is not null&#xA;✅ true is not null&#xA;✅ an array is not null&#xA;✅ an object is not null&#xA;✅ an empty string is not null&#xA;✅ a string is not null&#xA;✅ zero is not null&#xA;✅ a float is not null&#xA;✅ an integer is not null; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,19.999999999999996)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 86; color: green; test: multiple types can be specified in an array; schema: {&quot;type&quot;:[&quot;integer&quot;,&quot;string&quot;]}; pass: ✅ null is invalid&#xA;✅ a boolean is invalid&#xA;✅ an array is invalid&#xA;✅ an object is invalid&#xA;✅ a float is invalid&#xA;✅ a string is valid&#xA;✅ an integer is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,28.000000000000004)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 84; color: green; test: type as array with one item; schema: {&quot;type&quot;:[&quot;string&quot;]}; pass: ✅ number is invalid&#xA;✅ string is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,32.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 82; color: green; test: type: array or object; schema: {&quot;type&quot;:[&quot;array&quot;,&quot;object&quot;]}; pass: ✅ null is invalid&#xA;✅ string is invalid&#xA;✅ number is invalid&#xA;✅ object is valid&#xA;✅ array is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,36.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: type; percent correct: 80; color: green; test: type: array, object or null; schema: {&quot;type&quot;:[&quot;array&quot;,&quot;object&quot;,&quot;null&quot;]}; pass: ✅ string is invalid&#xA;✅ number is invalid&#xA;✅ null is valid&#xA;✅ object is valid&#xA;✅ array is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(790,39.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 0; color: orange; test: unevaluatedItems with items; schema: {&quot;items&quot;:true,&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;string&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: ❌ unevaluatedItems doesn't apply" role="graphics-symbol" aria-roledescription="circle" transform="translate(810,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 2; color: red; test: unevaluatedItems with nested items; schema: {&quot;allOf&quot;:[{&quot;items&quot;:true,&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;string&quot;}]}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 4; color: red; test: unevaluatedItems with nested unevaluatedItems; schema: {&quot;allOf&quot;:[{&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;string&quot;}]},{&quot;unevaluatedItems&quot;:true}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 6; color: red; test: unevaluatedItems with anyOf; schema: {&quot;anyOf&quot;:[{&quot;prefixItems&quot;:[true,{&quot;const&quot;:&quot;bar&quot;}]},{&quot;prefixItems&quot;:[true,true,{&quot;const&quot;:&quot;baz&quot;}]}],&quot;prefixItems&quot;:[{&quot;const&quot;:&quot;foo&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 8; color: red; test: unevaluatedItems with oneOf; schema: {&quot;oneOf&quot;:[{&quot;prefixItems&quot;:[true,{&quot;const&quot;:&quot;bar&quot;}]},{&quot;prefixItems&quot;:[true,{&quot;const&quot;:&quot;baz&quot;}]}],&quot;prefixItems&quot;:[{&quot;const&quot;:&quot;foo&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,184)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 10; color: red; test: unevaluatedItems with not; schema: {&quot;not&quot;:{&quot;not&quot;:{&quot;prefixItems&quot;:[true,{&quot;const&quot;:&quot;bar&quot;}]}},&quot;prefixItems&quot;:[{&quot;const&quot;:&quot;foo&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,180)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 12; color: red; test: unevaluatedItems with if/then/else; schema: {&quot;else&quot;:{&quot;prefixItems&quot;:[true,true,true,{&quot;const&quot;:&quot;else&quot;}]},&quot;if&quot;:{&quot;prefixItems&quot;:[true,{&quot;const&quot;:&quot;bar&quot;}]},&quot;prefixItems&quot;:[{&quot;const&quot;:&quot;foo&quot;}],&quot;then&quot;:{&quot;prefixItems&quot;:[true,true,{&quot;const&quot;:&quot;then&quot;}]},&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,176)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 50; color: yellow; test: unevaluatedItems with nested tuple; schema: {&quot;allOf&quot;:[{&quot;prefixItems&quot;:[true,{&quot;type&quot;:&quot;number&quot;}]}],&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;string&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ✅ with unevaluated items; fail: ❌ with no unevaluated items" role="graphics-symbol" aria-roledescription="circle" transform="translate(810,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 52; color: yellow; test: unevaluatedItems with boolean schemas; schema: {&quot;allOf&quot;:[true],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ✅ with no unevaluated items; fail: ❌ with unevaluated items" role="graphics-symbol" aria-roledescription="circle" transform="translate(810,96)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 54; color: yellow; test: unevaluatedItems with $ref; schema: {&quot;$defs&quot;:{&quot;bar&quot;:{&quot;prefixItems&quot;:[true,{&quot;type&quot;:&quot;string&quot;}]}},&quot;$ref&quot;:&quot;#/$defs/bar&quot;,&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;string&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ✅ with unevaluated items; fail: ❌ with no unevaluated items" role="graphics-symbol" aria-roledescription="circle" transform="translate(810,92)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 100; color: green; test: unevaluatedItems true; schema: {&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:true}; pass: ✅ with unevaluated items&#xA;✅ with no unevaluated items; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 98; color: green; test: unevaluatedItems false; schema: {&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ✅ with unevaluated items&#xA;✅ with no unevaluated items; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 96; color: green; test: unevaluatedItems as schema; schema: {&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:{&quot;type&quot;:&quot;string&quot;}}; pass: ✅ with invalid unevaluated items&#xA;✅ with valid unevaluated items&#xA;✅ with no unevaluated items; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 94; color: green; test: unevaluatedItems with uniform items; schema: {&quot;items&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ✅ unevaluatedItems doesn't apply; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 92; color: green; test: unevaluatedItems with tuple; schema: {&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;string&quot;}],&quot;type&quot;:&quot;array&quot;,&quot;unevaluatedItems&quot;:false}; pass: ✅ with unevaluated items&#xA;✅ with no unevaluated items; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedItems; percent correct: 90; color: green; test: unevaluatedItems can't see inside cousins; schema: {&quot;allOf&quot;:[{&quot;prefixItems&quot;:[true]},{&quot;unevaluatedItems&quot;:false}]}; pass: ✅ always fails; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(810,19.999999999999996)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 0; color: red; test: unevaluatedProperties with adjacent properties; schema: {&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,200)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 2; color: red; test: unevaluatedProperties with if/then/else; schema: {&quot;else&quot;:{&quot;properties&quot;:{&quot;baz&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;baz&quot;]},&quot;if&quot;:{&quot;properties&quot;:{&quot;foo&quot;:{&quot;const&quot;:&quot;then&quot;}},&quot;required&quot;:[&quot;foo&quot;]},&quot;then&quot;:{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;required&quot;:[&quot;bar&quot;]},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,196)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#e2474d" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 4; color: orange; test: unevaluatedProperties can't see inside cousins; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:true}},{&quot;unevaluatedProperties&quot;:false}]}; pass: ; fail: ❌ always fails" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,192)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 6; color: orange; test: nested unevaluatedProperties, outer true, inner false, properties outside; schema: {&quot;allOf&quot;:[{&quot;unevaluatedProperties&quot;:false}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:true}; pass: ; fail: ❌ with nested unevaluated properties&#xA;❌ with no nested unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,188)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#ffa83f" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 50; color: yellow; test: unevaluatedProperties with nested additionalProperties; schema: {&quot;allOf&quot;:[{&quot;additionalProperties&quot;:true}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with no additional properties; fail: ❌ with additional properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,100)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 52; color: yellow; test: unevaluatedProperties with nested unevaluatedProperties; schema: {&quot;allOf&quot;:[{&quot;unevaluatedProperties&quot;:true}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:{&quot;maxLength&quot;:2,&quot;type&quot;:&quot;string&quot;}}; pass: ✅ with no nested unevaluated properties; fail: ❌ with nested unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,96)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 54; color: yellow; test: unevaluatedProperties with anyOf; schema: {&quot;anyOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:{&quot;const&quot;:&quot;bar&quot;}},&quot;required&quot;:[&quot;bar&quot;]},{&quot;properties&quot;:{&quot;baz&quot;:{&quot;const&quot;:&quot;baz&quot;}},&quot;required&quot;:[&quot;baz&quot;]},{&quot;properties&quot;:{&quot;quux&quot;:{&quot;const&quot;:&quot;quux&quot;}},&quot;required&quot;:[&quot;quux&quot;]}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ when two match and has no unevaluated properties&#xA;✅ when one matches and has no unevaluated properties; fail: ❌ when two match and has unevaluated properties&#xA;❌ when one matches and has unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,92)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 56; color: yellow; test: unevaluatedProperties with dependentSchemas; schema: {&quot;dependentSchemas&quot;:{&quot;foo&quot;:{&quot;properties&quot;:{&quot;bar&quot;:{&quot;const&quot;:&quot;bar&quot;}},&quot;required&quot;:[&quot;bar&quot;]}},&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with no unevaluated properties; fail: ❌ with unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,87.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 58; color: yellow; test: nested unevaluatedProperties, outer false, inner true, properties outside; schema: {&quot;allOf&quot;:[{&quot;unevaluatedProperties&quot;:true}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with no nested unevaluated properties; fail: ❌ with nested unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,84.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 60; color: yellow; test: nested unevaluatedProperties, outer false, inner true, properties inside; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;unevaluatedProperties&quot;:true}],&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with no nested unevaluated properties; fail: ❌ with nested unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,80)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 62; color: yellow; test: cousin unevaluatedProperties, true and false, true with properties; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;unevaluatedProperties&quot;:true},{&quot;unevaluatedProperties&quot;:false}],&quot;type&quot;:&quot;object&quot;}; pass: ✅ with nested unevaluated properties; fail: ❌ with no nested unevaluated properties" role="graphics-symbol" aria-roledescription="circle" transform="translate(830,76)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#4aa148" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 100; color: green; test: unevaluatedProperties true; schema: {&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:true}; pass: ✅ with unevaluated properties&#xA;✅ with no unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 98; color: green; test: unevaluatedProperties schema; schema: {&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:{&quot;minLength&quot;:3,&quot;type&quot;:&quot;string&quot;}}; pass: ✅ with invalid unevaluated properties&#xA;✅ with valid unevaluated properties&#xA;✅ with no unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 96; color: green; test: unevaluatedProperties false; schema: {&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with unevaluated properties&#xA;✅ with no unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 94; color: green; test: unevaluatedProperties with adjacent patternProperties; schema: {&quot;patternProperties&quot;:{&quot;^foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with unevaluated properties&#xA;✅ with no unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 92; color: green; test: unevaluatedProperties with adjacent additionalProperties; schema: {&quot;additionalProperties&quot;:true,&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with additional properties&#xA;✅ with no additional properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 90; color: green; test: unevaluatedProperties with nested properties; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;string&quot;}}}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with additional properties&#xA;✅ with no additional properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,19.999999999999996)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 88; color: green; test: unevaluatedProperties with nested patternProperties; schema: {&quot;allOf&quot;:[{&quot;patternProperties&quot;:{&quot;^bar&quot;:{&quot;type&quot;:&quot;string&quot;}}}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with additional properties&#xA;✅ with no additional properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,24)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 86; color: green; test: unevaluatedProperties with oneOf; schema: {&quot;oneOf&quot;:[{&quot;properties&quot;:{&quot;bar&quot;:{&quot;const&quot;:&quot;bar&quot;}},&quot;required&quot;:[&quot;bar&quot;]},{&quot;properties&quot;:{&quot;baz&quot;:{&quot;const&quot;:&quot;baz&quot;}},&quot;required&quot;:[&quot;baz&quot;]}],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with unevaluated properties&#xA;✅ with no unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,28.000000000000004)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 84; color: green; test: unevaluatedProperties with not; schema: {&quot;not&quot;:{&quot;not&quot;:{&quot;properties&quot;:{&quot;bar&quot;:{&quot;const&quot;:&quot;bar&quot;}},&quot;required&quot;:[&quot;bar&quot;]}},&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,32.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 82; color: green; test: unevaluatedProperties with boolean schemas; schema: {&quot;allOf&quot;:[true],&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with unevaluated properties&#xA;✅ with no unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,36.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 80; color: green; test: unevaluatedProperties with $ref; schema: {&quot;$defs&quot;:{&quot;bar&quot;:{&quot;properties&quot;:{&quot;bar&quot;:{&quot;type&quot;:&quot;string&quot;}}}},&quot;$ref&quot;:&quot;#/$defs/bar&quot;,&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:false}; pass: ✅ with unevaluated properties&#xA;✅ with no unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,39.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 78; color: green; test: nested unevaluatedProperties, outer true, inner false, properties inside; schema: {&quot;allOf&quot;:[{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;unevaluatedProperties&quot;:false}],&quot;type&quot;:&quot;object&quot;,&quot;unevaluatedProperties&quot;:true}; pass: ✅ with nested unevaluated properties&#xA;✅ with no nested unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,43.99999999999999)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: unevaluatedProperties; percent correct: 76; color: green; test: cousin unevaluatedProperties, true and false, false with properties; schema: {&quot;allOf&quot;:[{&quot;unevaluatedProperties&quot;:true},{&quot;properties&quot;:{&quot;foo&quot;:{&quot;type&quot;:&quot;string&quot;}},&quot;unevaluatedProperties&quot;:false}],&quot;type&quot;:&quot;object&quot;}; pass: ✅ with nested unevaluated properties&#xA;✅ with no nested unevaluated properties; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(830,48)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: uniqueItems; percent correct: 100; color: green; test: uniqueItems validation; schema: {&quot;uniqueItems&quot;:true}; pass: ✅ {&quot;a&quot;: true} and {&quot;a&quot;: 1} are unique&#xA;✅ {&quot;a&quot;: false} and {&quot;a&quot;: 0} are unique&#xA;✅ objects are non-unique despite key order&#xA;✅ different objects are unique&#xA;✅ non-unique heterogeneous types are invalid&#xA;✅ unique heterogeneous types are valid&#xA;✅ nested [0] and [false] are unique&#xA;✅ nested [1] and [true] are unique&#xA;✅ [0] and [false] are unique&#xA;✅ [1] and [true] are unique&#xA;✅ 0 and false are unique&#xA;✅ 1 and true are unique&#xA;✅ non-unique array of arrays is invalid&#xA;✅ unique array of arrays is valid&#xA;✅ non-unique array of nested objects is invalid&#xA;✅ unique array of nested objects is valid&#xA;✅ non-unique array of objects is invalid&#xA;✅ unique array of objects is valid&#xA;✅ true is not equal to one&#xA;✅ false is not equal to zero&#xA;✅ numbers are unique if mathematically unequal&#xA;✅ non-unique array of integers is invalid&#xA;✅ unique array of integers is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(850,0)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: uniqueItems; percent correct: 98; color: green; test: uniqueItems with an array of items; schema: {&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;boolean&quot;},{&quot;type&quot;:&quot;boolean&quot;}],&quot;uniqueItems&quot;:true}; pass: ✅ non-unique array extended from [true, false] is not valid&#xA;✅ non-unique array extended from [false, true] is not valid&#xA;✅ unique array extended from [true, false] is valid&#xA;✅ unique array extended from [false, true] is valid&#xA;✅ [true, true] from items array is not valid&#xA;✅ [false, false] from items array is not valid&#xA;✅ [true, false] from items array is valid&#xA;✅ [false, true] from items array is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(850,4.0000000000000036)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: uniqueItems; percent correct: 96; color: green; test: uniqueItems with an array of items and additionalItems=false; schema: {&quot;items&quot;:false,&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;boolean&quot;},{&quot;type&quot;:&quot;boolean&quot;}],&quot;uniqueItems&quot;:true}; pass: ✅ extra items are invalid even if unique&#xA;✅ [true, true] from items array is not valid&#xA;✅ [false, false] from items array is not valid&#xA;✅ [true, false] from items array is valid&#xA;✅ [false, true] from items array is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(850,8.000000000000007)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: uniqueItems; percent correct: 94; color: green; test: uniqueItems=false validation; schema: {&quot;uniqueItems&quot;:false}; pass: ✅ non-unique heterogeneous types are valid&#xA;✅ unique heterogeneous types are valid&#xA;✅ 0 and false are unique&#xA;✅ 1 and true are unique&#xA;✅ non-unique array of arrays is valid&#xA;✅ unique array of arrays is valid&#xA;✅ non-unique array of nested objects is valid&#xA;✅ unique array of nested objects is valid&#xA;✅ non-unique array of objects is valid&#xA;✅ unique array of objects is valid&#xA;✅ true is not equal to one&#xA;✅ false is not equal to zero&#xA;✅ numbers are unique if mathematically unequal&#xA;✅ non-unique array of integers is valid&#xA;✅ unique array of integers is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(850,12.00000000000001)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: uniqueItems; percent correct: 92; color: green; test: uniqueItems=false with an array of items; schema: {&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;boolean&quot;},{&quot;type&quot;:&quot;boolean&quot;}],&quot;uniqueItems&quot;:false}; pass: ✅ non-unique array extended from [true, false] is valid&#xA;✅ non-unique array extended from [false, true] is valid&#xA;✅ unique array extended from [true, false] is valid&#xA;✅ unique array extended from [false, true] is valid&#xA;✅ [true, true] from items array is valid&#xA;✅ [false, false] from items array is valid&#xA;✅ [true, false] from items array is valid&#xA;✅ [false, true] from items array is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(850,15.999999999999993)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/><path aria-label="group: uniqueItems; percent correct: 90; color: green; test: uniqueItems=false with an array of items and additionalItems=false; schema: {&quot;items&quot;:false,&quot;prefixItems&quot;:[{&quot;type&quot;:&quot;boolean&quot;},{&quot;type&quot;:&quot;boolean&quot;}],&quot;uniqueItems&quot;:false}; pass: ✅ extra items are invalid even if unique&#xA;✅ [true, true] from items array is valid&#xA;✅ [false, false] from items array is valid&#xA;✅ [true, false] from items array is valid&#xA;✅ [false, true] from items array is valid; fail: " role="graphics-symbol" aria-roledescription="circle" transform="translate(850,19.999999999999996)" d="M2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,-2.7386127875258306,0A2.7386127875258306,2.7386127875258306,0,1,1,2.7386127875258306,0" fill="#6583ff" stroke-width="2" opacity="0.7"/></g><g class="mark-group role-title"><g transform="translate(402,-28)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" pointer-events="none"/><g><g class="mark-text role-title-text" role="graphics-symbol" aria-roledescription="title" aria-label="Title text 'gpt-4'" pointer-events="none"><text text-anchor="middle" transform="translate(0,14)" font-family="Inter" font-size="18px" font-weight="400" fill="#445668" opacity="1">gpt-4</text></g></g><path class="foreground" aria-hidden="true" d="" pointer-events="none" display="none"/></g></g></g><path class="foreground" aria-hidden="true" d="" display="none"/></g></g></g><path class="foreground" aria-hidden="true" d="" display="none"/></g></g></g></svg>